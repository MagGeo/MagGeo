{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MagGeo Documentation","text":"<p>Welcome to the MagGeo API Documentation - A comprehensive guide to GPS trajectory annotation with geomagnetic data from ESA's Swarm satellites.</p>"},{"location":"#for-developers-package-users","title":"For Developers &amp; Package Users","text":"<ul> <li> <p>Quick Start     ---     Get MagGeo running in 5 minutes with installation and basic examples</p> </li> <li> <p>API Reference     ---     Complete function reference with examples and parameters</p> </li> <li> <p>User Guide     ---     Comprehensive guides for all MagGeo features and workflows</p> </li> <li> <p>Examples     ---     Practical examples from basic usage to advanced workflows</p> </li> </ul>"},{"location":"#for-researchers-scientists","title":"For Researchers &amp; Scientists","text":"<ul> <li> <p>Scientific Background     ---     Research methodology, geomagnetic theory, and scientific foundation</p> </li> <li> <p>Methods &amp; Validation     ---     Detailed Method and validation of MagGeo's approach to GPS annotation</p> </li> <li> <p>How does it work     ---     What happens under the hood? A deep dive into MagGeo's architecture and algorithms</p> </li> <li> <p>Case Studies     ---     Use cases of MagGeo in wildlife tracking and migration studies</p> </li> </ul>"},{"location":"#package-information","title":"Package Information","text":"<p>Installation</p> <pre><code>pip install maggeo\n</code></pre> <p>Quick Example</p> <pre><code>import pandas as pd\nfrom maggeo.core import annotate_gps_with_geomag\n\n# Load GPS data\ngps_data = pd.read_csv('trajectory.csv')\n\n# Annotate with geomagnetic data\nresult = annotate_gps_with_geomag(\n    gps_data,\n    lat_col='latitude',\n    lon_col='longitude',\n    datetime_col='datetime'\n)\n\n# Save annotated trajectory\nresult.to_csv('annotated_trajectory.csv')\n</code></pre>"},{"location":"#whats-new-in-v020","title":"What's New in v0.2.0","text":"<p>Major Performance Improvements</p> <ul> <li>5.6x faster processing for large trajectories</li> <li>Enhanced parallel processing with smart chunking</li> <li>SwarmDataManager for unified data handling</li> <li>Comprehensive CLI with 4 commands</li> </ul>"},{"location":"#documentation-structure","title":"Documentation Structure","text":"Section Purpose Audience Getting Started Installation, setup, first steps All users User Guide Detailed usage instructions Package users API Reference Function documentation Developers Examples Practical code examples All users Scientific Site \u2192 Research background Researchers"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions! See our Contributing Guidelines for:</p> <ul> <li>Bug reports and feature requests</li> <li>Documentation improvements  </li> <li>Code contributions</li> <li>Scientific validation and use cases</li> </ul>"},{"location":"#citation","title":"Citation","text":"<p>If you use MagGeo in your research, please cite:</p> <p>Primary Citation</p> <p>Benitez-Paez, F., Brum-Bastos, V.d., Beggan, C.D. et al. Fusion of wildlife tracking and satellite geomagnetic data for the study of animal migration. Mov Ecol 9, 31 (2021). https://doi.org/10.1186/s40462-021-00268-4</p> <p>Complete citation guide \u2192</p>"},{"location":"DOCS_README/","title":"MagGeo Documentation","text":"<p>This directory contains the MkDocs-based API documentation for MagGeo.</p>"},{"location":"DOCS_README/#structure","title":"Structure","text":"<pre><code>api_docs/              # Documentation source files\n\u251c\u2500\u2500 about/            # About pages (changelog, citation, etc.)\n\u251c\u2500\u2500 api/              # API reference documentation  \n\u251c\u2500\u2500 examples/         # Usage examples\n\u251c\u2500\u2500 getting-started/  # Installation and quickstart guides\n\u251c\u2500\u2500 user-guide/       # User guide documentation\n\u251c\u2500\u2500 javascripts/      # Custom JavaScript files\n\u251c\u2500\u2500 stylesheets/      # Custom CSS files\n\u2514\u2500\u2500 index.md          # Home page\n\nmkdocs.yml            # MkDocs configuration file\ntest_docs.sh          # Local testing script\n</code></pre>"},{"location":"DOCS_README/#local-testing","title":"Local Testing","text":""},{"location":"DOCS_README/#quick-start","title":"Quick Start","text":"<p>Run the test script to build and serve the documentation locally:</p> <pre><code>./test_docs.sh\n</code></pre> <p>This will: 1. Create a virtual environment (if needed) 2. Install dependencies 3. Build the documentation 4. Start a local server at http://127.0.0.1:8001/</p>"},{"location":"DOCS_README/#manual-testing","title":"Manual Testing","text":"<p>If you prefer to run commands manually:</p> <pre><code># Create and activate virtual environment\npython3 -m venv docs_env\nsource docs_env/bin/activate\n\n# Install dependencies\npip install -e \".[docs]\"\n\n# Build documentation\nmkdocs build\n\n# Serve locally\nmkdocs serve --dev-addr 127.0.0.1:8001\n</code></pre>"},{"location":"DOCS_README/#available-commands","title":"Available Commands","text":"<pre><code>./test_docs.sh serve    # Build and serve (default)\n./test_docs.sh build    # Build only\n./test_docs.sh clean    # Clean build directory\n./test_docs.sh help     # Show help\n</code></pre>"},{"location":"DOCS_README/#configuration","title":"Configuration","text":"<p>The documentation is configured in <code>mkdocs.yml</code>:</p> <ul> <li>docs_dir: <code>api_docs</code> - Points to the documentation source</li> <li>site_dir: <code>site</code> - Output directory for built documentation</li> <li>theme: Material Design theme with custom styling</li> <li>plugins: mkdocstrings for API documentation generation</li> </ul>"},{"location":"DOCS_README/#github-actions","title":"GitHub Actions","text":"<p>The documentation is automatically built and deployed via GitHub Actions:</p> <ul> <li>Trigger: Push to <code>main</code>, <code>develop</code>, or <code>refactor_maggeo</code> branches</li> <li>Build: Runs <code>mkdocs build --strict</code> to catch any issues</li> <li>Deploy: Automatically deploys to GitHub Pages on push to <code>main</code></li> </ul>"},{"location":"DOCS_README/#separate-from-quarto-site","title":"Separate from Quarto Site","text":"<p>This MkDocs site (<code>api_docs/</code>) is separate from any Quarto documentation that may exist in a <code>docs/</code> folder. This allows you to:</p> <ul> <li>Maintain API documentation with MkDocs (better for Python APIs)</li> <li>Use Quarto for research documentation and analysis</li> <li>Keep different documentation types organized</li> </ul>"},{"location":"DOCS_README/#troubleshooting","title":"Troubleshooting","text":""},{"location":"DOCS_README/#common-issues","title":"Common Issues","text":"<ol> <li>Port already in use: Use a different port with <code>--dev-addr 127.0.0.1:8002</code></li> <li>Missing files warnings: These are informational; the build will still succeed</li> <li>Python environment: Make sure to use Python 3.8+ with the docs dependencies</li> </ol>"},{"location":"DOCS_README/#dependencies","title":"Dependencies","text":"<p>The documentation requires these packages (defined in <code>pyproject.toml</code>):</p> <ul> <li>mkdocs&gt;=1.5.0</li> <li>mkdocs-material&gt;=9.4.0</li> <li>mkdocstrings[python]&gt;=0.24.0</li> <li>mkdocs-jupyter&gt;=0.24.0</li> <li>mkdocs-git-revision-date-localized-plugin&gt;=1.2.0</li> <li>mkdocs-awesome-pages-plugin&gt;=2.9.0</li> </ul>"},{"location":"about/CONTRIBUTING/","title":"Contributing to MagGeo","text":"<p>We welcome contributions to MagGeo! This document provides guidelines for contributing to the project.</p>"},{"location":"about/CONTRIBUTING/#development-setup","title":"Development Setup","text":"<ol> <li> <p>Clone the repository: <pre><code>git clone https://github.com/MagGeo/MagGeo-Annotation-Program.git\ncd MagGeo-Annotation-Program\n</code></pre></p> </li> <li> <p>Create a virtual environment: <pre><code>conda env create -f environment.yml\nconda activate MagGeoEnv\n</code></pre></p> </li> <li> <p>Install in development mode: <pre><code>pip install -e \".[dev]\"\n</code></pre></p> </li> </ol>"},{"location":"about/CONTRIBUTING/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\npython -m pytest tests/ -v\n\n# Run with coverage\npython -m pytest tests/ --cov=maggeo --cov-report=html\n</code></pre>"},{"location":"about/CONTRIBUTING/#code-style","title":"Code Style","text":"<p>We use Black for code formatting and flake8 for linting:</p> <pre><code># Format code\nblack maggeo/ tests/\n\n# Check linting\nflake8 maggeo/ tests/\n</code></pre>"},{"location":"about/CONTRIBUTING/#submitting-changes","title":"Submitting Changes","text":"<ol> <li>Fork the repository</li> <li>Create a feature branch (<code>git checkout -b feature/amazing-feature</code>)</li> <li>Make your changes</li> <li>Add tests for new functionality</li> <li>Ensure all tests pass</li> <li>Commit your changes (<code>git commit -m 'Add amazing feature'</code>)</li> <li>Push to the branch (<code>git push origin feature/amazing-feature</code>)</li> <li>Open a Pull Request</li> </ol>"},{"location":"about/CONTRIBUTING/#reporting-issues","title":"Reporting Issues","text":"<p>Please use the GitHub issue tracker to report bugs or request features. Include: - Python version - Operating system - Steps to reproduce the issue - Expected behavior - Actual behavior</p>"},{"location":"about/CONTRIBUTING/#documentation","title":"Documentation","text":"<p>Documentation improvements are always welcome! We use: - Docstrings for function documentation - README.md for general usage - Jupyter notebooks for examples</p> <p>Thank you for contributing to MagGeo!</p>"},{"location":"about/changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"about/changelog/#020-2025-06-01","title":"[0.2.0] - 2025-06-01","text":""},{"location":"about/changelog/#added","title":"Added","text":"<ul> <li>Comprehensive debug system with environment variable control</li> <li>Proper Python package structure with relative imports</li> <li>Unit tests for all major components</li> <li>CLI entry point for command-line usage</li> <li>Support for CHAOS geomagnetic model CHAOS-8</li> <li>Support for Python 3.8-3.11</li> </ul>"},{"location":"about/changelog/#changed","title":"Changed","text":"<ul> <li>Refactored from script-based to proper Python package</li> <li>Improved error handling and logging</li> <li>Modularized code into separate functional modules</li> <li>Updated dependencies to latest versions</li> </ul>"},{"location":"about/changelog/#fixed","title":"Fixed","text":"<ul> <li>Import issues in module structure</li> <li>Token handling for VirES authentication</li> <li>Data type handling in processing pipeline</li> </ul>"},{"location":"about/changelog/#010-2021-03-01","title":"[0.1.0] - 2021-03-01","text":""},{"location":"about/changelog/#added_1","title":"Added","text":"<ul> <li>Initial release of MagGeo</li> <li>GPS trajectory annotation with Swarm satellite data</li> <li>CHAOS geomagnetic model integration</li> <li>Basic processing pipeline</li> </ul>"},{"location":"about/citation/","title":"Citation","text":"<p>If you use MagGeo in your research, please cite both the original research paper and the software package.</p>"},{"location":"about/citation/#primary-citation-required","title":"Primary Citation (Required)","text":""},{"location":"about/citation/#original-research-paper","title":"Original Research Paper","text":"<p>Benitez-Paez, F., Brum-Bastos, V.d., Beggan, C.D. et al. Fusion of wildlife tracking and satellite geomagnetic data for the study of animal migration. Mov Ecol 9, 31 (2021). https://doi.org/10.1186/s40462-021-00268-4</p>"},{"location":"about/citation/#citation-formats","title":"Citation Formats","text":""},{"location":"about/citation/#apa-style","title":"APA Style","text":"<pre><code>Benitez-Paez, F., Brum-Bastos, V. d., Beggan, C. D., Long, J. A., &amp; Dem\u0161ar, U. (2021). \nFusion of wildlife tracking and satellite geomagnetic data for the study of animal migration. \nMovement Ecology, 9(1), 31. https://doi.org/10.1186/s40462-021-00268-4\n</code></pre>"},{"location":"about/citation/#mla-style","title":"MLA Style","text":"<pre><code>Benitez-Paez, Fernando, et al. \"Fusion of wildlife tracking and satellite geomagnetic data \nfor the study of animal migration.\" Movement Ecology, vol. 9, no. 1, 2021, p. 31. \nSpringer, doi:10.1186/s40462-021-00268-4.\n</code></pre>"},{"location":"about/citation/#chicago-style","title":"Chicago Style","text":"<pre><code>Benitez-Paez, Fernando, Vanessa da Silva Brum-Bastos, Ciar\u00e1n D. Beggan, Jed A. Long, \nand Ur\u0161ka Dem\u0161ar. \"Fusion of wildlife tracking and satellite geomagnetic data for the \nstudy of animal migration.\" Movement Ecology 9, no. 1 (2021): 31. \nhttps://doi.org/10.1186/s40462-021-00268-4.\n</code></pre>"},{"location":"about/citation/#ieee-style","title":"IEEE Style","text":"<pre><code>F. Benitez-Paez, V. d. Brum-Bastos, C. D. Beggan, J. A. Long, and U. Dem\u0161ar, \n\"Fusion of wildlife tracking and satellite geomagnetic data for the study of animal migration,\" \nMov. Ecol., vol. 9, no. 1, p. 31, 2021, doi: 10.1186/s40462-021-00268-4.\n</code></pre>"},{"location":"about/citation/#nature-style","title":"Nature Style","text":"<pre><code>Benitez-Paez, F., Brum-Bastos, V. d., Beggan, C. D., Long, J. A. &amp; Dem\u0161ar, U. \nFusion of wildlife tracking and satellite geomagnetic data for the study of animal migration. \nMov. Ecol. 9, 31 (2021).\n</code></pre>"},{"location":"about/citation/#science-style","title":"Science Style","text":"<pre><code>F. Benitez-Paez, V. d. Brum-Bastos, C. D. Beggan, J. A. Long, U. Dem\u0161ar, \nFusion of wildlife tracking and satellite geomagnetic data for the study of animal migration. \nMov. Ecol. 9, 31 (2021).\n</code></pre>"},{"location":"about/citation/#bibtex-entry","title":"BibTeX Entry","text":"<pre><code>@article{benitez2021fusion,\n  title={Fusion of wildlife tracking and satellite geomagnetic data for the study of animal migration},\n  author={Benitez-Paez, Fernando and Brum-Bastos, Vanessa da Silva and Beggan, Ciar{\\'a}n D and Long, Jed A and Dem{\\v{s}}ar, Ur{\\v{s}}ka},\n  journal={Movement Ecology},\n  volume={9},\n  number={1},\n  pages={31},\n  year={2021},\n  publisher={Springer},\n  doi={10.1186/s40462-021-00268-4},\n  url={https://doi.org/10.1186/s40462-021-00268-4}\n}\n</code></pre>"},{"location":"about/citation/#software-citation-recommended","title":"Software Citation (Recommended)","text":""},{"location":"about/citation/#maggeo-software-package","title":"MagGeo Software Package","text":"<p>When citing the software implementation, please also include:</p> <p>Benitez-Paez, F., Dem\u0161ar, U., Long, J. A., &amp; Beggan, C. D. (2025). MagGeo: A Python package for fusion of GPS trajectories and satellite geomagnetic data (Version 0.2.0) [Computer software]. https://github.com/MagGeo/MagGeo</p>"},{"location":"about/citation/#software-bibtex","title":"Software BibTeX","text":"<pre><code>@software{maggeo2025,\n  author={Benitez-Paez, Fernando and Dem{\\v{s}}ar, Ur{\\v{s}}ka and Long, Jed A and Beggan, Ciar{\\'a}n D},\n  title={MagGeo: A Python package for fusion of GPS trajectories and satellite geomagnetic data},\n  version={0.2.0},\n  year={2025},\n  url={https://github.com/MagGeo/MagGeo},\n  note={Python package}\n}\n</code></pre>"},{"location":"about/citation/#complete-citation-example","title":"Complete Citation Example","text":"<p>For comprehensive attribution, use both citations:</p> <pre><code>This research utilized MagGeo (Benitez-Paez et al., 2025), a Python package implementing \nthe methodology described in Benitez-Paez et al. (2021) for fusing wildlife tracking \nand satellite geomagnetic data.\n\nReferences:\nBenitez-Paez, F., Brum-Bastos, V. d., Beggan, C. D., Long, J. A., &amp; Dem\u0161ar, U. (2021). \nFusion of wildlife tracking and satellite geomagnetic data for the study of animal migration. \nMovement Ecology, 9(1), 31. https://doi.org/10.1186/s40462-021-00268-4\n\nBenitez-Paez, F., Dem\u0161ar, U., Long, J. A., &amp; Beggan, C. D. (2025). MagGeo: A Python \npackage for fusion of GPS trajectories and satellite geomagnetic data (Version 0.2.0) \n[Computer software]. https://github.com/MagGeo/MagGeo\n</code></pre>"},{"location":"about/citation/#license-and-attribution","title":"License and Attribution","text":"<p>MagGeo is released under the MIT License, which allows free use with proper attribution. The citation requirements are for academic courtesy and scientific reproducibility, not legal obligations.</p>"},{"location":"about/citation/#contributing-to-citations","title":"Contributing to Citations","text":"<p>If you extend MagGeo or publish research using it, please:</p> <ol> <li>Notify the authors: Let us know about your research</li> <li>Share your citation: Help us track MagGeo's scientific impact</li> <li>Report issues: Contribute to improving the package</li> <li>Consider collaboration: We welcome scientific partnerships</li> </ol>"},{"location":"about/citation/#related-work","title":"Related Work","text":""},{"location":"about/citation/#additional-references","title":"Additional References","text":"<p>If your research builds on related geomagnetic or movement ecology work, consider also citing:</p> <p>Swarm Mission: <pre><code>Friis-Christensen, E., L\u00fchr, H., &amp; Hulot, G. (2006). Swarm: A constellation to study \nthe Earth's magnetic field. Earth, Planets and Space, 58(4), 351-358.\n</code></pre></p> <p>VirES Platform: <pre><code>Olsen, N., Albini, G., Bouffard, J., et al. (2013). Magnetic observations from ESA's \nSwarm satellites. Earth and Planetary Science Letters, 368, 44-52.\n</code></pre></p> <p>CHAOS Geomagnetic Model: <pre><code>Finlay, C. C., Olsen, N., Kotsiaros, S., Gillet, N., &amp; T\u00f8ffner-Clausen, L. (2016). \nRecent geomagnetic secular variation from Swarm and ground observatories as estimated \nin the CHAOS-6 geomagnetic field model. Earth, Planets and Space, 68(1), 112.\n</code></pre></p>"},{"location":"about/citation/#questions","title":"Questions?","text":"<p>For questions about citation or attribution: - Email: fernando.benitez@st-andrews.ac.uk - GitHub Issues: MagGeo Repository - Academic Collaboration: Contact for potential research partnerships</p> <p>Thank you for citing MagGeo and supporting reproducible research! \ud83d\ude4f</p>"},{"location":"api/","title":"API Reference","text":"<p>MagGeo provides a comprehensive API for geomagnetic field analysis and GPS trajectory annotation.</p>"},{"location":"api/#api-reference_1","title":"API Reference","text":""},{"location":"api/#core-functions","title":"Core Functions","text":""},{"location":"api/#maggeo.annotate_gps_with_geomag","title":"<code>annotate_gps_with_geomag(*args, **kwargs)</code>","text":""},{"location":"api/#swarmdatamanager","title":"SwarmDataManager","text":""},{"location":"api/#maggeo.SwarmDataManager","title":"<code>SwarmDataManager</code>","text":"<p>Manages Swarm satellite data download, storage, and retrieval operations.</p> <p>This class provides a high-level interface for working with Swarm data independently from the main MagGeo pipeline.</p>"},{"location":"api/#maggeo.SwarmDataManager-functions","title":"Functions","text":""},{"location":"api/#maggeo.SwarmDataManager.__init__","title":"<code>__init__(data_dir='swarm_data', file_format='csv', chunk_size=10, token=None)</code>","text":"<p>Initialize SwarmDataManager.</p>"},{"location":"api/#maggeo.SwarmDataManager.__init__--parameters","title":"Parameters","text":"<p>data_dir : str, default \"swarm_data\"     Directory to store downloaded Swarm data file_format : str, default \"parquet\"      File format for saving data. Options: \"csv\", \"parquet\" chunk_size : int, default 10     Number of dates to process in each batch token : str, optional     VirES token for authentication</p>"},{"location":"api/#maggeo.SwarmDataManager.download_for_trajectory","title":"<code>download_for_trajectory(gps_df, save_individual_files=True, save_concatenated=True, resume=True)</code>","text":"<p>Download Swarm data for an entire GPS trajectory.</p>"},{"location":"api/#maggeo.SwarmDataManager.download_for_trajectory--parameters","title":"Parameters","text":"<p>gps_df : pd.DataFrame     GPS trajectory data with datetime information save_individual_files : bool, default True     Whether to save individual daily files save_concatenated : bool, default True     Whether to save concatenated files for each satellite resume : bool, default True     Whether to skip already downloaded files</p>"},{"location":"api/#maggeo.SwarmDataManager.download_for_trajectory--returns","title":"Returns","text":"<p>tuple     Tuple of concatenated DataFrames for satellites A, B, C</p>"},{"location":"api/#maggeo.SwarmDataManager.download_for_dates","title":"<code>download_for_dates(dates, save_individual_files=True, save_concatenated=True, resume=True)</code>","text":"<p>Download Swarm data for specific dates.</p>"},{"location":"api/#maggeo.SwarmDataManager.download_for_dates--parameters","title":"Parameters","text":"<p>dates : List[dt.date]     List of dates to download data for save_individual_files : bool, default True     Whether to save individual daily files save_concatenated : bool, default True     Whether to save concatenated files for each satellite resume : bool, default True     Whether to skip already downloaded files</p>"},{"location":"api/#maggeo.SwarmDataManager.download_for_dates--returns","title":"Returns","text":"<p>tuple     Tuple of concatenated DataFrames for satellites A, B, C</p>"},{"location":"api/#maggeo.SwarmDataManager.load_data_for_dates","title":"<code>load_data_for_dates(dates, satellites=['A', 'B', 'C'])</code>","text":"<p>Load previously downloaded Swarm data for specific dates.</p>"},{"location":"api/#maggeo.SwarmDataManager.load_data_for_dates--parameters","title":"Parameters","text":"<p>dates : List[dt.date]     List of dates to load data for satellites : List[str], default ['A', 'B', 'C']     Which satellites to load data for</p>"},{"location":"api/#maggeo.SwarmDataManager.load_data_for_dates--returns","title":"Returns","text":"<p>dict     Dictionary with satellite names as keys and concatenated DataFrames as values</p>"},{"location":"api/#maggeo.SwarmDataManager.load_concatenated_data","title":"<code>load_concatenated_data(satellites=['A', 'B', 'C'])</code>","text":"<p>Load previously saved concatenated Swarm data.</p>"},{"location":"api/#maggeo.SwarmDataManager.load_concatenated_data--parameters","title":"Parameters","text":"<p>satellites : List[str], default ['A', 'B', 'C']     Which satellites to load data for</p>"},{"location":"api/#maggeo.SwarmDataManager.load_concatenated_data--returns","title":"Returns","text":"<p>dict     Dictionary with satellite names as keys and DataFrames as values</p>"},{"location":"api/#maggeo.SwarmDataManager.get_data_summary","title":"<code>get_data_summary()</code>","text":"<p>Get summary of available downloaded data.</p>"},{"location":"api/#maggeo.SwarmDataManager.get_data_summary--returns","title":"Returns","text":"<p>pd.DataFrame     Summary of available data files with metadata</p>"},{"location":"api/#maggeo.SwarmDataManager.cleanup_data","title":"<code>cleanup_data(older_than_days=None, quality_threshold='poor')</code>","text":"<p>Clean up downloaded data files.</p>"},{"location":"api/#maggeo.SwarmDataManager.cleanup_data--parameters","title":"Parameters","text":"<p>older_than_days : int, optional     Remove files older than this many days quality_threshold : str, default 'poor'     Remove files with data quality below this threshold</p>"},{"location":"api/#maggeo.SwarmDataManager.cleanup_data--returns","title":"Returns","text":"<p>int     Number of files removed</p>"},{"location":"api/#methods","title":"Methods","text":""},{"location":"api/#maggeo.SwarmDataManager.download_for_trajectory","title":"<code>download_for_trajectory(gps_df, save_individual_files=True, save_concatenated=True, resume=True)</code>","text":"<p>Download Swarm data for an entire GPS trajectory.</p>"},{"location":"api/#maggeo.SwarmDataManager.download_for_trajectory--parameters","title":"Parameters","text":"<p>gps_df : pd.DataFrame     GPS trajectory data with datetime information save_individual_files : bool, default True     Whether to save individual daily files save_concatenated : bool, default True     Whether to save concatenated files for each satellite resume : bool, default True     Whether to skip already downloaded files</p>"},{"location":"api/#maggeo.SwarmDataManager.download_for_trajectory--returns","title":"Returns","text":"<p>tuple     Tuple of concatenated DataFrames for satellites A, B, C</p>"},{"location":"api/#maggeo.SwarmDataManager.load_concatenated_data","title":"<code>load_concatenated_data(satellites=['A', 'B', 'C'])</code>","text":"<p>Load previously saved concatenated Swarm data.</p>"},{"location":"api/#maggeo.SwarmDataManager.load_concatenated_data--parameters","title":"Parameters","text":"<p>satellites : List[str], default ['A', 'B', 'C']     Which satellites to load data for</p>"},{"location":"api/#maggeo.SwarmDataManager.load_concatenated_data--returns","title":"Returns","text":"<p>dict     Dictionary with satellite names as keys and DataFrames as values</p>"},{"location":"api/#utility-functions","title":"Utility Functions","text":""},{"location":"api/#maggeo.download_swarm_data_for_trajectory","title":"<code>download_swarm_data_for_trajectory(gps_df, data_dir='swarm_data', file_format='csv', token=None, resume=True)</code>","text":"<p>Convenience function to download Swarm data for a GPS trajectory.</p>"},{"location":"api/#maggeo.download_swarm_data_for_trajectory--parameters","title":"Parameters","text":"<p>gps_df : pd.DataFrame     GPS trajectory data data_dir : str, default \"swarm_data\"     Directory to store data file_format : str, default \"csv\"     File format for saving data token : str, optional     VirES authentication token resume : bool, default True     Whether to resume from existing downloads</p>"},{"location":"api/#maggeo.download_swarm_data_for_trajectory--returns","title":"Returns","text":"<p>tuple     Tuple of concatenated DataFrames for satellites A, B, C</p>"},{"location":"api/#maggeo.load_swarm_data","title":"<code>load_swarm_data(data_dir='swarm_data', file_format='csv', satellites=['A', 'B', 'C'])</code>","text":"<p>Convenience function to load previously downloaded Swarm data.</p>"},{"location":"api/#maggeo.load_swarm_data--parameters","title":"Parameters","text":"<p>data_dir : str, default \"swarm_data\"     Directory containing the data file_format : str, default \"csv\"     File format of the data satellites : List[str], default ['A', 'B', 'C']     Which satellites to load</p>"},{"location":"api/#maggeo.load_swarm_data--returns","title":"Returns","text":"<p>dict     Dictionary with satellite names as keys and DataFrames as values</p>"},{"location":"api/#quick-reference","title":"Quick Reference","text":""},{"location":"api/#core-functions_1","title":"Core Functions","text":"Function Description <code>annotate_gps_with_geomag</code> Main function for annotating GPS trajectories <code>download_swarm_data_for_trajectory</code> Download Swarm data for specific trajectory <code>load_swarm_data</code> Load previously downloaded Swarm data"},{"location":"api/#classes","title":"Classes","text":"Class Description <code>SwarmDataManager</code> Manages Swarm data downloading and storage"},{"location":"api/#modules","title":"Modules","text":"Module Description <code>interpolation</code> Interpolation methods and utilities <code>chaos</code> CHAOS geomagnetic model integration <code>date_utils</code> Date and time handling utilities <code>parallel_processing</code> Parallel processing utilities <code>indices</code> Geomagnetic indices and calculations"},{"location":"api/#architecture-overview","title":"Architecture Overview","text":"<pre><code>GPS Trajectory \u2192 MagGeo Core \u2192 SwarmDataManager \u2192 VirES API\n     \u2193              \u2193              \u2193\nInput Data \u2192 Processing Pipeline \u2192 Local Storage\n     \u2193              \u2193              \u2193\nValidation \u2192 Interpolation \u2192 Persistent Files\n     \u2193              \u2193              \u2193\nQuality Check \u2192 CHAOS Model \u2192 Annotated Output\n</code></pre>"},{"location":"api/#data-flow","title":"Data Flow","text":"<ol> <li>Input: GPS trajectory with coordinates and timestamps</li> <li>Data Acquisition: Download Swarm satellite data via VirES API</li> <li>Storage: Persist data locally for reuse (SwarmDataManager)</li> <li>Processing: Interpolate magnetic field values to GPS locations</li> <li>Enhancement: Add CHAOS model data and geomagnetic indices</li> <li>Output: Annotated trajectory with comprehensive magnetic field information</li> </ol>"},{"location":"api/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Use SwarmDataManager for repeated analysis of the same time periods</li> <li>Enable parallel processing for large datasets (&gt;10,000 GPS points)</li> <li>Choose appropriate file formats: Parquet for performance, CSV for compatibility</li> <li>Batch process multiple trajectories when possible</li> </ul>"},{"location":"api/#error-handling","title":"Error Handling","text":"<p>All MagGeo functions implement comprehensive error handling, you need to activate the DEBUG mode to see the error messages. Use the <code>--debug</code> flag when running scripts or set the environment variable <code>MAGGEO_DEBUG=1</code>.</p> <pre><code>MAGGEO_DEBUG=1 python -m maggeo.annotate_gps_with_geomag --debug\n</code></pre>"},{"location":"api/core/","title":"Core Functions","text":"<p>The core module provides the main functionality for MagGeo, including the primary function for annotating GPS trajectories with geomagnetic field data.</p>"},{"location":"api/core/#maggeo.core","title":"<code>core</code>","text":""},{"location":"api/core/#maggeo.core-classes","title":"Classes","text":""},{"location":"api/core/#maggeo.core-functions","title":"Functions","text":""},{"location":"api/core/#maggeo.core.annotate_gps_with_geomag","title":"<code>annotate_gps_with_geomag(params, use_swarm_manager=False, use_parallel=False, n_cores=None)</code>","text":"<p>MagGeo annotation Pipeline.</p>"},{"location":"api/core/#maggeo.core.annotate_gps_with_geomag--parameters","title":"Parameters","text":"<p>params : dict      Dictionary with keys for GPS file, columns, and token. use_swarm_manager : bool, default False     Whether to use the SwarmDataManager for more efficient data handling.     If True, data will be saved locally and can be reused later. use_parallel : bool, default False     Whether to use parallel processing for interpolation and CHAOS calculations.     Significantly speeds up processing for large datasets. n_cores : int, optional     Number of cores to use for parallel processing. If None, uses all available cores.</p>"},{"location":"api/core/#maggeo.core.annotate_gps_with_geomag--returns","title":"Returns","text":"<p>pd.DataFrame     Annotated DataFrame with geomagnetic data.</p>"},{"location":"api/core/#main-functions","title":"Main Functions","text":""},{"location":"api/core/#annotate_gps_with_geomag","title":"annotate_gps_with_geomag","text":"<p>MagGeo annotation Pipeline.</p> <p>Example Usage:</p> <pre><code>import maggeo\n\n# Basic parameters\nparams = {\n    'data_dir': 'data/sample_data',\n    'gpsfilename': 'BirdGPSTrajectory.csv',\n    'lat_col': 'latitude',\n    'long_col': 'longitude',\n    'datetime_col': 'timestamp',\n    'token': 'your_vires_token'\n}\n\n# Annotate trajectory\nresult = maggeo.annotate_gps_with_geomag(params)\nprint(f\"Annotated {len(result)} GPS points with magnetic field data\")\n</code></pre> <p>Advanced Usage:</p> <pre><code># With SwarmDataManager for persistent storage\nparams.update({\n    'use_swarm_manager': True,\n    'swarm_data_dir': 'persistent_swarm_data',\n    'swarm_manager_format': 'parquet'\n})\n\n# With parallel processing\nparams.update({\n    'parallel': True,\n    'n_cores': 4\n})\n\nresult = maggeo.annotate_gps_with_geomag(params)\n</code></pre>"},{"location":"api/core/#maggeo.core.annotate_gps_with_geomag--parameters","title":"Parameters","text":"<p>params : dict      Dictionary with keys for GPS file, columns, and token. use_swarm_manager : bool, default False     Whether to use the SwarmDataManager for more efficient data handling.     If True, data will be saved locally and can be reused later. use_parallel : bool, default False     Whether to use parallel processing for interpolation and CHAOS calculations.     Significantly speeds up processing for large datasets. n_cores : int, optional     Number of cores to use for parallel processing. If None, uses all available cores.</p>"},{"location":"api/core/#maggeo.core.annotate_gps_with_geomag--returns","title":"Returns","text":"<p>pd.DataFrame     Annotated DataFrame with geomagnetic data.</p>"},{"location":"api/core/#configuration-parameters","title":"Configuration Parameters","text":"<p>The main function <code>annotate_gps_with_geomag</code> accepts a comprehensive set of parameters:</p>"},{"location":"api/core/#required-parameters","title":"Required Parameters","text":"Parameter Type Description <code>data_dir</code> str Directory containing GPS data <code>gpsfilename</code> str Name of GPS trajectory CSV file <code>lat_col</code> str Column name for latitude values <code>long_col</code> str Column name for longitude values <code>datetime_col</code> str Column name for datetime values <code>token</code> str VirES authentication token"},{"location":"api/core/#optional-parameters","title":"Optional Parameters","text":"Parameter Type Default Description <code>use_swarm_manager</code> bool False Use SwarmDataManager for storage <code>swarm_data_dir</code> str None Directory for SwarmDataManager <code>parallel</code> bool False Enable parallel processing <code>n_cores</code> int None Number of CPU cores <code>interpolation_method</code> str 'linear' Interpolation method <code>satellites</code> list ['A', 'B', 'C'] Swarm satellites to use <code>quality_check</code> bool True Perform data quality validation"},{"location":"api/core/#return-data-structure","title":"Return Data Structure","text":"<p>The annotated GPS data includes these columns:</p>"},{"location":"api/core/#return-data-structure_1","title":"Return Data Structure","text":"<p>The annotated GPS data includes these columns:</p>"},{"location":"api/core/#original-gps-data","title":"Original GPS Data","text":"<ul> <li><code>timestamp</code>: Original timestamp column</li> <li><code>location-long</code>: Longitude values (degrees)</li> <li><code>location-lat</code>: Latitude values (degrees) </li> <li><code>height</code>: Height/altitude values (if present)</li> <li><code>individual_id</code>: Individual/track identifier (if present)</li> </ul>"},{"location":"api/core/#trajectory-statistics","title":"Trajectory Statistics","text":"<ul> <li><code>TotalPoints</code>: Total number of points in trajectory</li> <li><code>Minimum_Distance</code>: Minimum distance between consecutive points (meters)</li> <li><code>Average_Distance</code>: Average distance between consecutive points (meters)</li> </ul>"},{"location":"api/core/#geomagnetic-activity-index","title":"Geomagnetic Activity Index","text":"<ul> <li><code>Kp</code>: Planetary K-index indicating geomagnetic activity level (0-9 scale)</li> </ul>"},{"location":"api/core/#magnetic-field-components-nec-frame","title":"Magnetic Field Components (NEC Frame)","text":"<ul> <li><code>N</code>: North component of magnetic field (nT)</li> <li><code>E</code>: East component of magnetic field (nT)  </li> <li><code>C</code>: Center/Down component of magnetic field (nT)</li> </ul>"},{"location":"api/core/#observed-magnetic-field-components","title":"Observed Magnetic Field Components","text":"<ul> <li><code>N_Obs</code>: Observed North component from Swarm satellites (nT)</li> <li><code>E_Obs</code>: Observed East component from Swarm satellites (nT)</li> <li><code>C_Obs</code>: Observed Center/Down component from Swarm satellites (nT)</li> </ul>"},{"location":"api/core/#derived-magnetic-parameters","title":"Derived Magnetic Parameters","text":"<ul> <li><code>H</code>: Horizontal magnetic field intensity (nT)</li> <li><code>D</code>: Magnetic declination (degrees)</li> <li><code>I</code>: Magnetic inclination (degrees)</li> <li><code>F</code>: Total magnetic field intensity (nT)</li> </ul>"},{"location":"api/core/#example-output","title":"Example Output","text":"<pre><code># Example of annotated trajectory structure\nprint(result.columns.tolist())\n# ['timestamp', 'location-long', 'location-lat', 'height', 'individual_id',\n#  'TotalPoints', 'Minimum_Distance', 'Average_Distance', 'Kp',\n#  'N', 'E', 'C', 'N_Obs', 'E_Obs', 'C_Obs', 'H', 'D', 'I', 'F']\n\n# Sample data point\nprint(result.iloc[0])\n# timestamp               08/09/2014 06:10\n# location-long           67.97505\n# location-lat            70.8303\n# height                  0.406\n# individual_id           1\n# TotalPoints             46\n# Minimum_Distance        340.04\n# Average_Distance        667.15\n# Kp                      1.67\n# N                       6989.98\n# E                       3866.52\n# C                       57646.92\n# N_Obs                   7009.43\n# E_Obs                   3854.00\n# C_Obs                   57636.83\n# H                       7988.11\n# D                       28.95\n# I                       82.11\n# F                       58197.75\n</code></pre>"},{"location":"api/core/#data-interpretation","title":"Data Interpretation","text":""},{"location":"api/core/#coordinate-systems","title":"Coordinate Systems","text":"<p>NEC Frame (North-East-Center): - N: Positive northward - E: Positive eastward - C: Positive downward (toward Earth's center)</p> <p>Classical Magnetic Elements: - H: Horizontal intensity = \u221a(N\u00b2 + E\u00b2) - D: Declination = arctan(E/N) - angle from geographic north - I: Inclination = arctan(C/H) - angle from horizontal - F: Total intensity = \u221a(N\u00b2 + E\u00b2 + C\u00b2)</p>"},{"location":"api/core/#quality-assessment","title":"Quality Assessment","text":"<p>The difference between model values (<code>N</code>, <code>E</code>, <code>C</code>) and observed values (<code>N_Obs</code>, <code>E_Obs</code>, <code>C_Obs</code>) indicates: - Small differences: Good model-observation agreement - Large differences: Possible local anomalies, data quality issues, or significant magnetic disturbances</p>"},{"location":"api/core/#geomagnetic-activity","title":"Geomagnetic Activity","text":"<p>Kp Index Interpretation: - 0-2: Quiet conditions - 3-4: Unsettled to active - 5-6: Minor to moderate geomagnetic storm - 7-9: Strong to extreme geomagnetic storm</p>"},{"location":"api/indices/","title":"Geomagnetic Indices","text":"<p>The indices module provides functions to retrieve and integrate geomagnetic activity indices with GPS trajectory data.</p>"},{"location":"api/indices/#maggeo.indices","title":"<code>indices</code>","text":"<p>Module for fetching geomagnetic indices from HAPI servers.</p> <p>This module provides functions to fetch AE (Auroral Electrojet) and SME (SuperMAG Electrojet)  indices from their respective HAPI servers for validation and analysis of geomagnetic data.</p>"},{"location":"api/indices/#maggeo.indices-functions","title":"Functions","text":""},{"location":"api/indices/#maggeo.indices.get_ae_index","title":"<code>get_ae_index(unique_dates, verbose=False)</code>","text":"<p>Fetch AE, AL, and AU indices from NASA CDAWeb HAPI server.</p>"},{"location":"api/indices/#maggeo.indices.get_ae_index--parameters","title":"Parameters:","text":"<p>unique_dates : array-like     Array of unique date strings in format 'YYYY-MM-DD' verbose : bool, optional     If True, print progress information. Default is True.</p>"},{"location":"api/indices/#maggeo.indices.get_ae_index--returns","title":"Returns:","text":"<p>pd.DataFrame     DataFrame with DateTime index and columns ['AE_INDEX', 'AL_INDEX', 'AU_INDEX']     Returns None if no data was fetched successfully.</p>"},{"location":"api/indices/#maggeo.indices.get_ae_index--example","title":"Example:","text":"<p>dates = ['2014-08-09'] ae_data = get_ae_index(dates) print(ae_data.head())</p>"},{"location":"api/indices/#maggeo.indices.get_sme_index","title":"<code>get_sme_index(unique_dates, verbose=True)</code>","text":"<p>Fetch SME (SuperMAG Electrojet) index from SuperMAG HAPI server.</p>"},{"location":"api/indices/#maggeo.indices.get_sme_index--parameters","title":"Parameters:","text":"<p>unique_dates : array-like     Array of unique date strings in format 'YYYY-MM-DD' verbose : bool, optional     If True, print progress information. Default is True.</p>"},{"location":"api/indices/#maggeo.indices.get_sme_index--returns","title":"Returns:","text":"<p>pd.DataFrame     DataFrame with DateTime index and column ['SME']     Returns None if no data was fetched successfully.</p>"},{"location":"api/indices/#maggeo.indices.get_sme_index--example","title":"Example:","text":"<p>dates = ['2014-08-09'] sme_data = get_sme_index(dates) print(sme_data.head())</p>"},{"location":"api/indices/#maggeo.indices.merge_indices_with_maggeo","title":"<code>merge_indices_with_maggeo(df_csv, ae_data=None, sme_data=None, timestamp_col='timestamp')</code>","text":"<p>Merge AE and/or SME index data with MagGeo results.</p>"},{"location":"api/indices/#maggeo.indices.merge_indices_with_maggeo--parameters","title":"Parameters:","text":"<p>df_csv : pd.DataFrame     Original MagGeo results DataFrame ae_data : pd.DataFrame, optional     AE index data from get_ae_index() sme_data : pd.DataFrame, optional     SME index data from get_sme_index() timestamp_col : str, optional     Name of the timestamp column in df_csv. Default is 'timestamp'.</p>"},{"location":"api/indices/#maggeo.indices.merge_indices_with_maggeo--returns","title":"Returns:","text":"<p>pd.DataFrame     Merged DataFrame with original MagGeo data and index data</p>"},{"location":"api/indices/#overview","title":"Overview","text":"<p>This module provides access to geomagnetic indices that characterize the state of Earth's magnetosphere:</p> <ul> <li>AE Index: Auroral Electrojet activity measure</li> <li>SME Index: SuperMAG Electrojet activity measure  </li> <li>Integration: Merge indices with GPS trajectory data</li> </ul>"},{"location":"api/indices/#key-functions","title":"Key Functions","text":""},{"location":"api/indices/#get_ae_index","title":"get_ae_index","text":"<p>Fetch AE, AL, and AU indices from NASA CDAWeb HAPI server.</p> <p>Example:</p> <pre><code>from maggeo.indices import get_ae_index\nimport pandas as pd\n\n# Get unique dates from GPS trajectory\ngps_df = pd.read_csv('trajectory.csv')\ngps_df['timestamp'] = pd.to_datetime(gps_df['timestamp'])\nunique_dates = gps_df['timestamp'].dt.date.unique()\n\n# Download AE index data\nae_data = get_ae_index(unique_dates, verbose=True)\nprint(f\"Downloaded AE data: {len(ae_data)} records\")\n</code></pre>"},{"location":"api/indices/#maggeo.indices.get_ae_index--parameters","title":"Parameters:","text":"<p>unique_dates : array-like     Array of unique date strings in format 'YYYY-MM-DD' verbose : bool, optional     If True, print progress information. Default is True.</p>"},{"location":"api/indices/#maggeo.indices.get_ae_index--returns","title":"Returns:","text":"<p>pd.DataFrame     DataFrame with DateTime index and columns ['AE_INDEX', 'AL_INDEX', 'AU_INDEX']     Returns None if no data was fetched successfully.</p>"},{"location":"api/indices/#maggeo.indices.get_ae_index--example","title":"Example:","text":"<p>dates = ['2014-08-09'] ae_data = get_ae_index(dates) print(ae_data.head())</p>"},{"location":"api/indices/#get_sme_index","title":"get_sme_index","text":"<p>Fetch SME (SuperMAG Electrojet) index from SuperMAG HAPI server.</p> <p>Example:</p> <pre><code>from maggeo.indices import get_sme_index\n\n# Download SME index data\nsme_data = get_sme_index(unique_dates, verbose=True)\nprint(f\"Downloaded SME data: {len(sme_data)} records\")\n</code></pre>"},{"location":"api/indices/#maggeo.indices.get_sme_index--parameters","title":"Parameters:","text":"<p>unique_dates : array-like     Array of unique date strings in format 'YYYY-MM-DD' verbose : bool, optional     If True, print progress information. Default is True.</p>"},{"location":"api/indices/#maggeo.indices.get_sme_index--returns","title":"Returns:","text":"<p>pd.DataFrame     DataFrame with DateTime index and column ['SME']     Returns None if no data was fetched successfully.</p>"},{"location":"api/indices/#maggeo.indices.get_sme_index--example","title":"Example:","text":"<p>dates = ['2014-08-09'] sme_data = get_sme_index(dates) print(sme_data.head())</p>"},{"location":"api/indices/#merge_indices_with_maggeo","title":"merge_indices_with_maggeo","text":"<p>Merge AE and/or SME index data with MagGeo results.</p> <p>Example:</p> <pre><code>from maggeo.indices import merge_indices_with_maggeo\n\n# Merge indices with GPS trajectory data\nenhanced_df = merge_indices_with_maggeo(\n    df_csv=gps_df,\n    ae_data=ae_data,\n    sme_data=sme_data,\n    timestamp_col='timestamp'\n)\n\n# New columns: AE, SME indices interpolated to GPS timestamps\nprint(enhanced_df[['timestamp', 'latitude', 'longitude', 'AE', 'SME']].head())\n</code></pre>"},{"location":"api/indices/#maggeo.indices.merge_indices_with_maggeo--parameters","title":"Parameters:","text":"<p>df_csv : pd.DataFrame     Original MagGeo results DataFrame ae_data : pd.DataFrame, optional     AE index data from get_ae_index() sme_data : pd.DataFrame, optional     SME index data from get_sme_index() timestamp_col : str, optional     Name of the timestamp column in df_csv. Default is 'timestamp'.</p>"},{"location":"api/indices/#maggeo.indices.merge_indices_with_maggeo--returns","title":"Returns:","text":"<p>pd.DataFrame     Merged DataFrame with original MagGeo data and index data</p>"},{"location":"api/indices/#available-indices","title":"Available Indices","text":""},{"location":"api/indices/#ae-index-auroral-electrojet","title":"AE Index (Auroral Electrojet)","text":"<ul> <li>Source: Official geomagnetic observatories</li> <li>Temporal Resolution: 1 minute</li> <li>Coverage: Global auroral activity measure</li> <li>Units: nanoTesla (nT)</li> <li>Range: 0 to &gt;2000 nT</li> </ul>"},{"location":"api/indices/#sme-index-supermag-electrojet","title":"SME Index (SuperMAG Electrojet)","text":"<ul> <li>Source: SuperMAG collaboration</li> <li>Temporal Resolution: 1 minute  </li> <li>Coverage: Enhanced global coverage</li> <li>Units: nanoTesla (nT)</li> <li>Range: 0 to &gt;3000 nT</li> </ul>"},{"location":"api/indices/#integration-workflow","title":"Integration Workflow","text":""},{"location":"api/indices/#complete-integration-example","title":"Complete Integration Example","text":"<pre><code>from maggeo.indices import get_ae_index, get_sme_index, merge_indices_with_maggeo\nimport pandas as pd\n\n# 1. Load GPS trajectory\ngps_df = pd.read_csv('bird_trajectory.csv')\ngps_df['timestamp'] = pd.to_datetime(gps_df['timestamp'])\n\n# 2. Get unique dates for index download\nunique_dates = gps_df['timestamp'].dt.date.unique()\nprint(f\"Downloading indices for {len(unique_dates)} unique dates\")\n\n# 3. Download geomagnetic indices\nae_data = get_ae_index(unique_dates, verbose=True)\nsme_data = get_sme_index(unique_dates, verbose=True)\n\n# 4. Merge with GPS data\nenhanced_trajectory = merge_indices_with_maggeo(\n    df_csv=gps_df,\n    ae_data=ae_data,\n    sme_data=sme_data,\n    timestamp_col='timestamp'\n)\n\n# 5. Analyze results\nprint(f\"AE range: {enhanced_trajectory['AE'].min():.0f} - {enhanced_trajectory['AE'].max():.0f} nT\")\nprint(f\"SME range: {enhanced_trajectory['SME'].min():.0f} - {enhanced_trajectory['SME'].max():.0f} nT\")\n</code></pre>"},{"location":"api/indices/#activity-level-classification","title":"Activity Level Classification","text":""},{"location":"api/indices/#using-ae-index","title":"Using AE Index","text":"<pre><code># Classify activity levels based on AE index\ndef classify_ae_activity(ae_value):\n    if ae_value &lt; 100:\n        return 'quiet'\n    elif ae_value &lt; 300:\n        return 'active'  \n    elif ae_value &lt; 500:\n        return 'minor_storm'\n    elif ae_value &lt; 1000:\n        return 'major_storm'\n    else:\n        return 'severe_storm'\n\nenhanced_trajectory['activity_level'] = enhanced_trajectory['AE'].apply(classify_ae_activity)\n</code></pre>"},{"location":"api/indices/#activity-distribution","title":"Activity Distribution","text":"<pre><code># Analyze activity distribution\nactivity_counts = enhanced_trajectory['activity_level'].value_counts()\nprint(\"Activity level distribution:\")\nprint(activity_counts)\n\n# Filter for storm periods\nstorm_periods = enhanced_trajectory[\n    enhanced_trajectory['activity_level'].str.contains('storm')\n]\nprint(f\"Storm periods: {len(storm_periods)} GPS points\")\n</code></pre>"},{"location":"api/indices/#integration-with-main-maggeo-workflow","title":"Integration with Main MagGeo Workflow","text":""},{"location":"api/indices/#automatic-index-integration","title":"Automatic Index Integration","text":"<pre><code>import maggeo\n\n# Indices are automatically included in main workflow\nparams = {\n    'data_dir': 'data',\n    'gpsfilename': 'trajectory.csv',\n    'lat_col': 'latitude',\n    'long_col': 'longitude',\n    'datetime_col': 'timestamp',\n    'token': 'your_vires_token',\n\n    # Index integration settings\n    'include_indices': True,  # Enable automatic index download\n    'indices': ['AE', 'SME']  # Specify which indices to include\n}\n\nresult = maggeo.annotate_gps_with_geomag(params)\n# Result includes both magnetic field data AND geomagnetic indices\n</code></pre>"},{"location":"api/indices/#data-quality-and-availability","title":"Data Quality and Availability","text":""},{"location":"api/indices/#data-coverage","title":"Data Coverage","text":"<ul> <li>AE Index: Available from 1957 to present</li> <li>SME Index: Available from 1970 to present</li> <li>Real-time availability: ~1-2 hours delay</li> <li>Definitive data: ~1 month delay</li> </ul>"},{"location":"api/indices/#quality-considerations","title":"Quality Considerations","text":"<pre><code># Check for missing data\nmissing_ae = enhanced_trajectory['AE'].isna().sum()\nmissing_sme = enhanced_trajectory['SME'].isna().sum()\n\nprint(f\"Missing AE data: {missing_ae} points\")\nprint(f\"Missing SME data: {missing_sme} points\")\n\n# Handle missing data\nenhanced_trajectory['AE'].fillna(method='ffill', inplace=True)  # Forward fill\nenhanced_trajectory['SME'].fillna(method='interpolate', inplace=True)  # Interpolate\n</code></pre>"},{"location":"api/indices/#error-handling","title":"Error Handling","text":""},{"location":"api/indices/#network-issues","title":"Network Issues","text":"<pre><code>try:\n    ae_data = get_ae_index(unique_dates, verbose=True)\nexcept Exception as e:\n    print(f\"Failed to download AE data: {e}\")\n    ae_data = None  # Continue without AE data\n\ntry:\n    sme_data = get_sme_index(unique_dates, verbose=True)\nexcept Exception as e:\n    print(f\"Failed to download SME data: {e}\")\n    sme_data = None  # Continue without SME data\n</code></pre>"},{"location":"api/indices/#graceful-degradation","title":"Graceful Degradation","text":"<pre><code># Merge with available indices only\nenhanced_trajectory = merge_indices_with_maggeo(\n    df_csv=gps_df,\n    ae_data=ae_data if ae_data is not None else None,\n    sme_data=sme_data if sme_data is not None else None,\n    timestamp_col='timestamp'\n)\n\n# Check which indices were successfully added\navailable_indices = []\nif 'AE' in enhanced_trajectory.columns:\n    available_indices.append('AE')\nif 'SME' in enhanced_trajectory.columns:\n    available_indices.append('SME')\n\nprint(f\"Successfully integrated indices: {available_indices}\")\n</code></pre>"},{"location":"api/parallel_processing/","title":"Parallel Processing","text":"<p>The parallel_processing module provides utilities for efficient parallel computation of MagGeo's geomagnetic field analysis pipeline, enabling faster processing of large GPS trajectories.</p>"},{"location":"api/parallel_processing/#maggeo.parallel_processing","title":"<code>parallel_processing</code>","text":"<p>Parallel processing utilities for MagGeo interpolation and CHAOS calculations.</p> <p>This module provides functions to parallelize the MagGeo pipeline correctly: - Only GPS trajectory data is chunked for parallel processing - Complete Swarm data (A, B, C) is passed to each worker process - Each GPS point can find its matches across all Swarm data for proper interpolation - CHAOS calculations are performed after interpolation with correct data flow</p>"},{"location":"api/parallel_processing/#maggeo.parallel_processing-functions","title":"Functions","text":""},{"location":"api/parallel_processing/#maggeo.parallel_processing.get_optimal_chunk_size","title":"<code>get_optimal_chunk_size(total_gps_points, n_cores, min_chunk_size=50)</code>","text":"<p>Calculate optimal chunk size for GPS trajectory parallel processing.</p>"},{"location":"api/parallel_processing/#maggeo.parallel_processing.get_optimal_chunk_size--parameters","title":"Parameters","text":"<p>total_gps_points : int     Total number of GPS points in the trajectory n_cores : int     Number of CPU cores available min_chunk_size : int, default 50     Minimum chunk size to ensure efficiency</p>"},{"location":"api/parallel_processing/#maggeo.parallel_processing.get_optimal_chunk_size--returns","title":"Returns","text":"<p>int     Optimal chunk size for GPS trajectory chunking</p>"},{"location":"api/parallel_processing/#maggeo.parallel_processing.split_gps_trajectory_into_chunks","title":"<code>split_gps_trajectory_into_chunks(gps_df, chunk_size)</code>","text":"<p>Split GPS trajectory DataFrame into chunks for parallel processing.</p> <p>IMPORTANT: Only the GPS trajectory is chunked. Swarm data must remain complete for each worker to find proper matches for interpolation.</p>"},{"location":"api/parallel_processing/#maggeo.parallel_processing.split_gps_trajectory_into_chunks--parameters","title":"Parameters","text":"<p>gps_df : pd.DataFrame     GPS trajectory DataFrame to split chunk_size : int     Size of each GPS chunk</p>"},{"location":"api/parallel_processing/#maggeo.parallel_processing.split_gps_trajectory_into_chunks--returns","title":"Returns","text":"<p>List[pd.DataFrame]     List of GPS trajectory chunks</p>"},{"location":"api/parallel_processing/#maggeo.parallel_processing.process_gps_chunk_complete_pipeline","title":"<code>process_gps_chunk_complete_pipeline(chunk_data)</code>","text":"<p>Process a GPS trajectory chunk through the complete MagGeo pipeline.</p> <p>This function follows the correct MagGeo logic: 1. For each GPS point in the chunk, interpolate using ALL Swarm data 2. Calculate CHAOS ground values for all interpolated points 3. Calculate additional geomagnetic components</p>"},{"location":"api/parallel_processing/#maggeo.parallel_processing.process_gps_chunk_complete_pipeline--parameters","title":"Parameters","text":"<p>chunk_data : tuple     Tuple containing (gps_chunk, complete_swarm_a, complete_swarm_b, complete_swarm_c, dt_seconds)</p>"},{"location":"api/parallel_processing/#maggeo.parallel_processing.process_gps_chunk_complete_pipeline--returns","title":"Returns","text":"<p>pd.DataFrame     Complete annotated DataFrame chunk with all geomagnetic values</p>"},{"location":"api/parallel_processing/#maggeo.parallel_processing.parallel_maggeo_annotation","title":"<code>parallel_maggeo_annotation(gps_df, swarm_a, swarm_b, swarm_c, dt_seconds=14400, n_cores=None, chunk_size=None)</code>","text":"<p>Perform parallel MagGeo annotation following the correct logic.</p> <ul> <li>Only GPS trajectory is chunked for parallel processing</li> <li>Complete Swarm data (A, B, C) is passed to each core</li> <li>Each GPS point finds matches across ALL Swarm data for proper interpolation.</li> <li>this could be enhaced with a better approach in the future.</li> <li>CHAOS calculations follow after interpolation with correct data flow</li> </ul>"},{"location":"api/parallel_processing/#maggeo.parallel_processing.parallel_maggeo_annotation--parameters","title":"Parameters","text":"<p>gps_df : pd.DataFrame     GPS trajectory DataFrame swarm_a, swarm_b, swarm_c : pd.DataFrame     Complete Swarm satellite data DataFrames (NOT chunked) dt_seconds : int, default 14400     Time window in seconds for interpolation n_cores : int, optional     Number of cores to use. If None, uses all available cores. chunk_size : int, optional     Size of GPS chunks for processing. If None, calculated automatically.</p>"},{"location":"api/parallel_processing/#maggeo.parallel_processing.parallel_maggeo_annotation--returns","title":"Returns","text":"<p>pd.DataFrame     Complete annotated DataFrame with all geomagnetic values</p>"},{"location":"api/parallel_processing/#overview","title":"Overview","text":"<p>This module implements parallel processing strategies specifically optimized for MagGeo's workflow:</p> <ul> <li>GPS Trajectory Chunking: Split large GPS trajectories for parallel processing</li> <li>Complete Swarm Data Access: Each worker process gets access to complete Swarm datasets</li> <li>Proper Interpolation: Ensures each GPS point can find matches across all Swarm data</li> <li>Integrated Pipeline: Handles interpolation, CHAOS calculations, and component derivation</li> </ul>"},{"location":"api/parallel_processing/#key-functions","title":"Key Functions","text":""},{"location":"api/parallel_processing/#parallel_maggeo_annotation","title":"parallel_maggeo_annotation","text":"<p>Perform parallel MagGeo annotation following the correct logic.</p> <ul> <li>Only GPS trajectory is chunked for parallel processing</li> <li>Complete Swarm data (A, B, C) is passed to each core</li> <li>Each GPS point finds matches across ALL Swarm data for proper interpolation.</li> <li>this could be enhaced with a better approach in the future.</li> <li>CHAOS calculations follow after interpolation with correct data flow</li> </ul> <p>Example:</p> <pre><code>from maggeo.parallel_processing import parallel_maggeo_annotation\nimport pandas as pd\n\n# Load GPS trajectory and Swarm data\ngps_df = pd.read_csv('large_trajectory.csv')\nswarm_a = pd.read_csv('swarm_a_data.csv')\nswarm_b = pd.read_csv('swarm_b_data.csv') \nswarm_c = pd.read_csv('swarm_c_data.csv')\n\n# Process in parallel\nresult = parallel_maggeo_annotation(\n    gps_df=gps_df,\n    swarm_a=swarm_a,\n    swarm_b=swarm_b,\n    swarm_c=swarm_c,\n    dt_seconds=14400,  # 4-hour time window\n    n_cores=4,\n    chunk_size=100\n)\n\nprint(f\"Processed {len(result)} points using 4 cores\")\n</code></pre>"},{"location":"api/parallel_processing/#maggeo.parallel_processing.parallel_maggeo_annotation--parameters","title":"Parameters","text":"<p>gps_df : pd.DataFrame     GPS trajectory DataFrame swarm_a, swarm_b, swarm_c : pd.DataFrame     Complete Swarm satellite data DataFrames (NOT chunked) dt_seconds : int, default 14400     Time window in seconds for interpolation n_cores : int, optional     Number of cores to use. If None, uses all available cores. chunk_size : int, optional     Size of GPS chunks for processing. If None, calculated automatically.</p>"},{"location":"api/parallel_processing/#maggeo.parallel_processing.parallel_maggeo_annotation--returns","title":"Returns","text":"<p>pd.DataFrame     Complete annotated DataFrame with all geomagnetic values</p>"},{"location":"api/parallel_processing/#get_optimal_chunk_size","title":"get_optimal_chunk_size","text":"<p>Calculate optimal chunk size for GPS trajectory parallel processing.</p> <p>Example:</p> <pre><code># Calculate optimal chunk size\nchunk_size = get_optimal_chunk_size(\n    total_gps_points=50000,\n    n_cores=4,\n    min_chunk_size=50\n)\nprint(f\"Optimal chunk size: {chunk_size}\")\n</code></pre>"},{"location":"api/parallel_processing/#maggeo.parallel_processing.get_optimal_chunk_size--parameters","title":"Parameters","text":"<p>total_gps_points : int     Total number of GPS points in the trajectory n_cores : int     Number of CPU cores available min_chunk_size : int, default 50     Minimum chunk size to ensure efficiency</p>"},{"location":"api/parallel_processing/#maggeo.parallel_processing.get_optimal_chunk_size--returns","title":"Returns","text":"<p>int     Optimal chunk size for GPS trajectory chunking</p>"},{"location":"api/parallel_processing/#split_gps_trajectory_into_chunks","title":"split_gps_trajectory_into_chunks","text":"<p>Split GPS trajectory DataFrame into chunks for parallel processing.</p> <p>IMPORTANT: Only the GPS trajectory is chunked. Swarm data must remain complete for each worker to find proper matches for interpolation.</p> <p>Example:</p> <pre><code># Split GPS trajectory into chunks\nchunks = split_gps_trajectory_into_chunks(\n    gps_df=large_gps_df,\n    chunk_size=100\n)\nprint(f\"Created {len(chunks)} GPS chunks\")\n</code></pre>"},{"location":"api/parallel_processing/#maggeo.parallel_processing.split_gps_trajectory_into_chunks--parameters","title":"Parameters","text":"<p>gps_df : pd.DataFrame     GPS trajectory DataFrame to split chunk_size : int     Size of each GPS chunk</p>"},{"location":"api/parallel_processing/#maggeo.parallel_processing.split_gps_trajectory_into_chunks--returns","title":"Returns","text":"<p>List[pd.DataFrame]     List of GPS trajectory chunks</p>"},{"location":"api/parallel_processing/#process_gps_chunk_complete_pipeline","title":"process_gps_chunk_complete_pipeline","text":"<p>Process a GPS trajectory chunk through the complete MagGeo pipeline.</p> <p>This function follows the correct MagGeo logic: 1. For each GPS point in the chunk, interpolate using ALL Swarm data 2. Calculate CHAOS ground values for all interpolated points 3. Calculate additional geomagnetic components</p>"},{"location":"api/parallel_processing/#maggeo.parallel_processing.process_gps_chunk_complete_pipeline--parameters","title":"Parameters","text":"<p>chunk_data : tuple     Tuple containing (gps_chunk, complete_swarm_a, complete_swarm_b, complete_swarm_c, dt_seconds)</p>"},{"location":"api/parallel_processing/#maggeo.parallel_processing.process_gps_chunk_complete_pipeline--returns","title":"Returns","text":"<p>pd.DataFrame     Complete annotated DataFrame chunk with all geomagnetic values</p>"},{"location":"api/parallel_processing/#processing-strategy","title":"Processing Strategy","text":""},{"location":"api/parallel_processing/#correct-parallel-architecture","title":"Correct Parallel Architecture","text":"<p>Unlike typical parallel processing approaches, MagGeo uses a specialized strategy:</p> <pre><code>gps_chunks = split_gps_trajectory_into_chunks(gps_df, chunk_size=100)\n\n# Each worker gets:\n# - Small GPS chunk (e.g., 100 points)\n# - Complete Swarm data (A, B, C) for proper spatiotemporal matching\nfor gps_chunk in gps_chunks:\n    result = process_chunk(gps_chunk, complete_swarm_a, complete_swarm_b, complete_swarm_c)\n</code></pre>"},{"location":"api/parallel_processing/#why-this-architecture","title":"Why This Architecture?","text":"<ol> <li>Spatiotemporal Interpolation: Each GPS point needs to find the best matches across ALL Swarm data</li> <li>Temporal Windows: GPS points may need Swarm data from hours before/after</li> <li>Quality Filtering: Workers need access to complete datasets to filter by quality</li> <li>Proper CHAOS Integration: CHAOS calculations require complete interpolated datasets</li> </ol>"},{"location":"api/parallel_processing/#performance-optimization","title":"Performance Optimization","text":""},{"location":"api/parallel_processing/#automatic-chunk-sizing","title":"Automatic Chunk Sizing","text":"<pre><code># Automatic optimization based on data size and available cores\nresult = parallel_maggeo_annotation(\n    gps_df=gps_df,\n    swarm_a=swarm_a,\n    swarm_b=swarm_b,\n    swarm_c=swarm_c,\n    # chunk_size automatically calculated\n    # n_cores automatically detected\n)\n</code></pre>"},{"location":"api/parallel_processing/#manual-tuning","title":"Manual Tuning","text":"<pre><code># Manual optimization for specific scenarios\noptimal_chunk = get_optimal_chunk_size(\n    total_gps_points=len(gps_df),\n    n_cores=8,\n    min_chunk_size=50  # Prevent tiny chunks\n)\n\nresult = parallel_maggeo_annotation(\n    gps_df=gps_df,\n    swarm_a=swarm_a,\n    swarm_b=swarm_b, \n    swarm_c=swarm_c,\n    chunk_size=optimal_chunk,\n    n_cores=8\n)\n</code></pre>"},{"location":"api/parallel_processing/#integration-with-main-workflow","title":"Integration with Main Workflow","text":""},{"location":"api/parallel_processing/#automatic-parallel-processing","title":"Automatic Parallel Processing","text":"<p>The main MagGeo function automatically uses parallel processing for large datasets:</p> <pre><code>import maggeo\n\nparams = {\n    'data_dir': 'data',\n    'gpsfilename': 'large_trajectory.csv',  # 10,000+ points\n    'lat_col': 'latitude',\n    'long_col': 'longitude',\n    'datetime_col': 'timestamp',\n    'token': 'your_token',\n\n    # Parallel processing enabled automatically for large datasets\n    'parallel': True,  # Optional: force parallel processing\n    'n_cores': 4       # Optional: specify core count\n}\n\nresult = maggeo.annotate_gps_with_geomag(params)\n</code></pre>"},{"location":"api/parallel_processing/#complete-processing-pipeline","title":"Complete Processing Pipeline","text":"<p>Each worker process follows this pipeline:</p>"},{"location":"api/parallel_processing/#1-interpolation-phase","title":"1. Interpolation Phase","text":"<pre><code># For each GPS point in chunk:\n# - Find spatiotemporally closest Swarm measurements using st_idw_process\n# - Apply inverse distance weighting\n# - Calculate interpolated magnetic field components\n</code></pre>"},{"location":"api/parallel_processing/#2-chaos-calculation-phase","title":"2. CHAOS Calculation Phase","text":"<pre><code># For the complete chunk:\n# - Calculate CHAOS model predictions using chaos_ground_values\n# - Derive observed vs. model components\n# - Add N, E, C, N_Obs, E_Obs, C_Obs columns\n</code></pre>"},{"location":"api/parallel_processing/#3-component-derivation-phase","title":"3. Component Derivation Phase","text":"<pre><code># Calculate derived magnetic components:\n# - H: Horizontal intensity = \u221a(N\u00b2 + E\u00b2)\n# - D: Declination = arctan(E/N)\n# - I: Inclination = arctan(C/H)  \n# - F: Total intensity = \u221a(N\u00b2 + E\u00b2 + C\u00b2)\n</code></pre>"},{"location":"api/parallel_processing/#error-handling","title":"Error Handling","text":""},{"location":"api/parallel_processing/#graceful-degradation","title":"Graceful Degradation","text":"<p>When a GPS point fails interpolation, the system creates a \"bad point\" result:</p> <pre><code>bad_point_result = {\n    'Latitude': gps_lat,\n    'Longitude': gps_lon,\n    'N_res': float('nan'),\n    'E_res': float('nan'),\n    'C_res': float('nan'),\n    'TotalPoints': 0,\n    'Minimum_Distance': float('nan'),\n    'Average_Distance': float('nan'),\n    'Kp': float('nan')\n}\n</code></pre>"},{"location":"api/parallel_processing/#chaos-calculation-failure","title":"CHAOS Calculation Failure","text":"<p>If CHAOS calculation fails for a chunk, NaN values are added for all CHAOS-derived columns: <code>N</code>, <code>E</code>, <code>C</code>, <code>N_Obs</code>, <code>E_Obs</code>, <code>C_Obs</code>, <code>H</code>, <code>D</code>, <code>I</code>, <code>F</code>.</p>"},{"location":"api/parallel_processing/#performance-guidelines","title":"Performance Guidelines","text":"<p>When to Use Parallel Processing: - GPS trajectories &gt; 1,000 points: Significant speedup - GPS trajectories &gt; 10,000 points: Major performance improvement - Multiple CPU cores available - Sufficient RAM for complete Swarm datasets</p> <p>Performance Expectations:</p> GPS Points Cores Expected Speedup 1,000 4 2-3x 10,000 4 3-4x 50,000 8 5-7x 100,000+ 8 6-8x <p>Actual performance depends on data complexity, system specifications, and Swarm data density.</p>"},{"location":"api/swarm_data_manager/","title":"SwarmDataManager","text":""},{"location":"api/swarm_data_manager/#maggeo.SwarmDataManager","title":"<code>SwarmDataManager</code>","text":"<p>Manages Swarm satellite data download, storage, and retrieval operations.</p> <p>This class provides a high-level interface for working with Swarm data independently from the main MagGeo pipeline.</p>"},{"location":"api/swarm_data_manager/#maggeo.SwarmDataManager-functions","title":"Functions","text":""},{"location":"api/swarm_data_manager/#maggeo.SwarmDataManager.__init__","title":"<code>__init__(data_dir='swarm_data', file_format='csv', chunk_size=10, token=None)</code>","text":"<p>Initialize SwarmDataManager.</p>"},{"location":"api/swarm_data_manager/#maggeo.SwarmDataManager.__init__--parameters","title":"Parameters","text":"<p>data_dir : str, default \"swarm_data\"     Directory to store downloaded Swarm data file_format : str, default \"parquet\"      File format for saving data. Options: \"csv\", \"parquet\" chunk_size : int, default 10     Number of dates to process in each batch token : str, optional     VirES token for authentication</p>"},{"location":"api/swarm_data_manager/#maggeo.SwarmDataManager.download_for_trajectory","title":"<code>download_for_trajectory(gps_df, save_individual_files=True, save_concatenated=True, resume=True)</code>","text":"<p>Download Swarm data for an entire GPS trajectory.</p>"},{"location":"api/swarm_data_manager/#maggeo.SwarmDataManager.download_for_trajectory--parameters","title":"Parameters","text":"<p>gps_df : pd.DataFrame     GPS trajectory data with datetime information save_individual_files : bool, default True     Whether to save individual daily files save_concatenated : bool, default True     Whether to save concatenated files for each satellite resume : bool, default True     Whether to skip already downloaded files</p>"},{"location":"api/swarm_data_manager/#maggeo.SwarmDataManager.download_for_trajectory--returns","title":"Returns","text":"<p>tuple     Tuple of concatenated DataFrames for satellites A, B, C</p>"},{"location":"api/swarm_data_manager/#maggeo.SwarmDataManager.download_for_dates","title":"<code>download_for_dates(dates, save_individual_files=True, save_concatenated=True, resume=True)</code>","text":"<p>Download Swarm data for specific dates.</p>"},{"location":"api/swarm_data_manager/#maggeo.SwarmDataManager.download_for_dates--parameters","title":"Parameters","text":"<p>dates : List[dt.date]     List of dates to download data for save_individual_files : bool, default True     Whether to save individual daily files save_concatenated : bool, default True     Whether to save concatenated files for each satellite resume : bool, default True     Whether to skip already downloaded files</p>"},{"location":"api/swarm_data_manager/#maggeo.SwarmDataManager.download_for_dates--returns","title":"Returns","text":"<p>tuple     Tuple of concatenated DataFrames for satellites A, B, C</p>"},{"location":"api/swarm_data_manager/#maggeo.SwarmDataManager.load_data_for_dates","title":"<code>load_data_for_dates(dates, satellites=['A', 'B', 'C'])</code>","text":"<p>Load previously downloaded Swarm data for specific dates.</p>"},{"location":"api/swarm_data_manager/#maggeo.SwarmDataManager.load_data_for_dates--parameters","title":"Parameters","text":"<p>dates : List[dt.date]     List of dates to load data for satellites : List[str], default ['A', 'B', 'C']     Which satellites to load data for</p>"},{"location":"api/swarm_data_manager/#maggeo.SwarmDataManager.load_data_for_dates--returns","title":"Returns","text":"<p>dict     Dictionary with satellite names as keys and concatenated DataFrames as values</p>"},{"location":"api/swarm_data_manager/#maggeo.SwarmDataManager.load_concatenated_data","title":"<code>load_concatenated_data(satellites=['A', 'B', 'C'])</code>","text":"<p>Load previously saved concatenated Swarm data.</p>"},{"location":"api/swarm_data_manager/#maggeo.SwarmDataManager.load_concatenated_data--parameters","title":"Parameters","text":"<p>satellites : List[str], default ['A', 'B', 'C']     Which satellites to load data for</p>"},{"location":"api/swarm_data_manager/#maggeo.SwarmDataManager.load_concatenated_data--returns","title":"Returns","text":"<p>dict     Dictionary with satellite names as keys and DataFrames as values</p>"},{"location":"api/swarm_data_manager/#maggeo.SwarmDataManager.get_data_summary","title":"<code>get_data_summary()</code>","text":"<p>Get summary of available downloaded data.</p>"},{"location":"api/swarm_data_manager/#maggeo.SwarmDataManager.get_data_summary--returns","title":"Returns","text":"<p>pd.DataFrame     Summary of available data files with metadata</p>"},{"location":"api/swarm_data_manager/#maggeo.SwarmDataManager.cleanup_data","title":"<code>cleanup_data(older_than_days=None, quality_threshold='poor')</code>","text":"<p>Clean up downloaded data files.</p>"},{"location":"api/swarm_data_manager/#maggeo.SwarmDataManager.cleanup_data--parameters","title":"Parameters","text":"<p>older_than_days : int, optional     Remove files older than this many days quality_threshold : str, default 'poor'     Remove files with data quality below this threshold</p>"},{"location":"api/swarm_data_manager/#maggeo.SwarmDataManager.cleanup_data--returns","title":"Returns","text":"<p>int     Number of files removed</p>"},{"location":"api/swarm_data_manager/#overview","title":"Overview","text":"<p>The <code>SwarmDataManager</code> is a class for efficient Swarm satellite data management in MagGeo. It provides persistent storage, resume capabilities, and intelligent data organization for research workflows.</p>"},{"location":"api/swarm_data_manager/#key-features","title":"Key Features","text":"<ul> <li>Persistent Storage: Download once, use many times</li> <li>Resume Capability: Continue interrupted downloads</li> <li>Multiple Formats: Parquet, CSV, and Pickle support</li> <li>Automatic Organization: Structured directory layout</li> <li>Data Quality: Built-in quality assessment and filtering</li> <li>Memory Efficient: Lazy loading and chunked processing</li> </ul>"},{"location":"api/swarm_data_manager/#quick-start","title":"Quick Start","text":"<pre><code>from maggeo import SwarmDataManager\nimport pandas as pd\n\n# Create manager\nmanager = SwarmDataManager(\n    data_dir=\"my_swarm_data\",\n    file_format=\"parquet\"\n)\n\n# Load GPS trajectory\ngps_df = pd.read_csv(\"trajectory.csv\")\ngps_df['timestamp'] = pd.to_datetime(gps_df['timestamp'])\n\n# Download Swarm data\nswarm_a, swarm_b, swarm_c = manager.download_for_trajectory(\n    gps_df,\n    token=\"your_vires_token\"\n)\n</code></pre>"},{"location":"api/swarm_data_manager/#directory-structure","title":"Directory Structure","text":"<p>The manager creates an organized directory structure:</p> <pre><code>my_swarm_data/\n\u251c\u2500\u2500 swarm_A/\n\u2502   \u251c\u2500\u2500 2020/\n\u2502   \u2502   \u251c\u2500\u2500 01/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 swarm_A_2020-01-01.csv\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 swarm_A_2020-01-02.csv\n\u2502   \u2502   \u2514\u2500\u2500 02/\n\u2502   \u2514\u2500\u2500 concatenated/\n\u2502       \u2514\u2500\u2500 swarm_A_2020-01-01_to_2020-01-31.csv\n\u251c\u2500\u2500 swarm_B/\n\u251c\u2500\u2500 swarm_C/\n\u2514\u2500\u2500 metadata/\n    \u251c\u2500\u2500 download_log.json\n    \u2514\u2500\u2500 quality_reports.json\n</code></pre>"},{"location":"api/swarm_data_manager/#advanced-usage","title":"Advanced Usage","text":""},{"location":"api/swarm_data_manager/#custom-configuration","title":"Custom Configuration","text":"<pre><code>manager = SwarmDataManager(\n    data_dir=\"swarm_data\",\n    file_format=\"parquet\",\n    chunk_size=10000,\n    parallel_download=True,\n    quality_filter=True,\n    compression=\"snappy\"\n)\n</code></pre>"},{"location":"api/swarm_data_manager/#batch-operations","title":"Batch Operations","text":"<pre><code># Download for multiple trajectories\ntrajectories = [\"traj1.csv\", \"traj2.csv\", \"traj3.csv\"]\n\nfor traj_file in trajectories:\n    gps_df = pd.read_csv(traj_file)\n    manager.download_for_trajectory(gps_df, token=token)\n\n# Load all data at once\nall_data = manager.load_concatenated_data(\n    satellites=['A', 'B', 'C'],\n    start_date='2020-01-01',\n    end_date='2020-12-31'\n)\n</code></pre>"},{"location":"api/swarm_data_manager/#quality-control","title":"Quality Control","text":"<pre><code># Get quality report\nquality_report = manager.get_quality_report('A')\nprint(f\"Data coverage: {quality_report['coverage']:.2%}\")\nprint(f\"Missing points: {quality_report['missing_count']}\")\n\n# Filter by quality\nhigh_quality_data = manager.load_concatenated_data(\n    satellites=['A'],\n    quality_threshold=0.9\n)\n</code></pre>"},{"location":"api/swarm_data_manager/#performance-tips","title":"Performance Tips","text":"<p>Optimization Strategies</p> <ol> <li>Use Parquet format for best performance</li> <li>Enable parallel download for large date ranges</li> <li>Set appropriate chunk_size based on available memory</li> <li>Use concatenated files for repeated analysis</li> <li>Filter by quality to reduce processing time</li> </ol>"},{"location":"api/swarm_data_manager/#error-handling","title":"Error Handling","text":"<p>The manager implements robust error handling:</p> <pre><code>try:\n    data = manager.download_for_trajectory(gps_df, token=token)\nexcept SwarmDataError as e:\n    print(f\"Swarm data error: {e}\")\nexcept NetworkError as e:\n    print(f\"Network error: {e}\")\nexcept StorageError as e:\n    print(f\"Storage error: {e}\")\n</code></pre>"},{"location":"api/swarm_data_manager/#integration-with-core-functions","title":"Integration with Core Functions","text":"<p>The manager seamlessly integrates with MagGeo's core functions:</p> <pre><code># Use with main annotation function\nparams = {\n    'data_dir': 'gps_data',\n    'gpsfilename': 'trajectory.csv',\n    'use_swarm_manager': True,\n    'swarm_data_dir': 'swarm_data',\n    'swarm_manager_format': 'parquet',\n    # ... other params\n}\n\nresult = maggeo.annotate_gps_with_geomag(params)\n</code></pre>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>MagGeo requires Python 3.8 or higher and can be installed via pip or from source.</p>"},{"location":"getting-started/installation/#requirements","title":"Requirements","text":"<ul> <li>Python: 3.8 or higher</li> <li>Operating System: Windows, macOS, or Linux</li> <li>VirES Token: Required for downloading Swarm data (free registration)</li> </ul>"},{"location":"getting-started/installation/#install-from-pypi-recommended","title":"Install from PyPI (Recommended)","text":"<pre><code>pip install maggeo\n</code></pre> <p>For development features:</p> <pre><code>pip install \"maggeo[dev]\"\n</code></pre> <p>For documentation building:</p> <pre><code>pip install \"maggeo[docs]\"\n</code></pre>"},{"location":"getting-started/installation/#install-from-source","title":"Install from Source","text":"<p>For the latest development version:</p> <pre><code>git clone https://github.com/fbenitez92/maggeo.git\ncd maggeo\npip install -e \".[dev]\"\n</code></pre>"},{"location":"getting-started/installation/#get-your-vires-token","title":"Get Your VirES Token","text":"<p>Token Required</p> <p>You need a VirES token to download Swarm satellite data.</p> <ol> <li>Go to VirES for Swarm</li> <li>Click \"Sign up\" and create a free account</li> <li>After login, go to your profile to find your access token</li> <li>Copy the token for use in MagGeo</li> </ol>"},{"location":"getting-started/installation/#verify-installation","title":"Verify Installation","text":"<p>Test your installation:</p> <pre><code>import maggeo\nprint(f\"MagGeo version: {maggeo.__version__}\")\n\n# Test basic functionality\nfrom maggeo import SwarmDataManager\nmanager = SwarmDataManager(\"test_data\")\nprint(\"\u2705 MagGeo installed successfully!\")\n</code></pre>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#common-issues","title":"Common Issues","text":"<p>ImportError: No module named 'maggeo'</p> <p>Solution: Make sure you activated the correct Python environment where MagGeo is installed.</p> <p>Token authentication failed</p> <p>Solution: Check that your VirES token is correct and your account is active.</p> <p>Permission denied when writing files</p> <p>Solution: Ensure you have write permissions to your data directory.</p>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<ul> <li>Quick Start Guide - Get up and running in 5 minutes</li> <li>Basic Usage - Learn the fundamentals</li> <li>Examples - See MagGeo in action</li> </ul>"},{"location":"getting-started/quickstart/","title":"Quick Start","text":"<p>Running MagGeo in just a few minutes!</p>"},{"location":"getting-started/quickstart/#1-prepare-your-data","title":"1. Prepare Your Data","text":"<p>MagGeo works with GPS trajectory data in CSV format:</p> <pre><code>timestamp,latitude,longitude, altitude\n2020-01-01 12:00:00,-45.123,123.456,0\n2020-01-01 12:01:00,-45.124,123.457,0.46\n2020-01-01 12:02:00,-45.125,123.458,0.92\n</code></pre>"},{"location":"getting-started/quickstart/#2-basic-usage","title":"2. Basic Usage","text":""},{"location":"getting-started/quickstart/#method-1-simple-function-call","title":"Method 1: Simple Function Call","text":"<pre><code>import maggeo\n\n# Configure parameters\nparams = {\n    'data_dir': 'data',\n    'gpsfilename': 'my_trajectory.csv',\n    'lat_col': 'latitude',\n    'long_col': 'longitude',\n    'datetime_col': 'timestamp',\n    'token': 'your_vires_token_here'\n}\n\n# Annotate trajectory with geomagnetic data\nresult = maggeo.annotate_gps_with_geomag(params)\nprint(f\"\u2705 Processed {len(result)} GPS points\")\n</code></pre>"},{"location":"getting-started/quickstart/#method-2-swarmdatamanager-recommended","title":"Method 2: SwarmDataManager (Recommended)","text":"<p>For better performance and data reuse:</p> <pre><code>from maggeo import SwarmDataManager\n\n# Create manager with persistent storage\nmanager = SwarmDataManager(\n    data_dir=\"swarm_data\",\n    file_format=\"csv\"  # or 'parquet'\n)\n\n# Load your GPS data\nimport pandas as pd\ngps_df = pd.read_csv('my_trajectory.csv')\ngps_df['timestamp'] = pd.to_datetime(gps_df['timestamp'])\n\n# Download Swarm data (only once!)\nswarm_a, swarm_b, swarm_c = manager.download_for_trajectory(\n    gps_df, \n    token='your_vires_token_here'\n)\n\n# Next time, just load from storage (much faster!)\ndata = manager.load_concatenated_data(['A', 'B', 'C'])\n</code></pre>"},{"location":"getting-started/quickstart/#3-command-line-interface","title":"3. Command Line Interface","text":"<p>MagGeo also provides a CLI for batch processing:</p> <pre><code># Create a configuration file\ncat &gt; config.yml &lt;&lt; EOF\ndata_dir: \"data\"\ngpsfilename: \"trajectory.csv\"\nlat_col: \"latitude\"\nlong_col: \"longitude\"\ndatetime_col: \"timestamp\"\nuse_swarm_manager: true\nswarm_data_dir: \"swarm_data\"\nEOF\n\n# Run annotation\nmaggeo annotate --config config.yml --token YOUR_TOKEN\n</code></pre>"},{"location":"getting-started/quickstart/#4-explore-your-results","title":"4. Explore Your Results","text":"<p>The annotated data includes rich geomagnetic information:</p> <pre><code># Examine the results\nprint(result.columns)\n\n# Plot magnetic field intensity\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(12, 6))\nplt.plot(result['timestamp'], result['F'])\nplt.title('Magnetic Field Intensity Along Trajectory')\nplt.xlabel('Time')\nplt.ylabel('Magnetic Field Intensity (nT)')\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.show()\n</code></pre>"},{"location":"getting-started/quickstart/#5-parallel-processing","title":"5. Parallel Processing","text":"<p>For large datasets, enable parallel processing:</p> <pre><code>params['parallel'] = True\nparams['n_cores'] = 4  # Use 4 CPU cores\nresult = maggeo.annotate_gps_with_geomag(params)\n</code></pre>"},{"location":"getting-started/quickstart/#whats-next","title":"What's Next?","text":"<p>Continue Learning</p> <ul> <li>User Guide: Comprehensive documentation</li> <li>API Reference: Detailed function documentation  </li> <li>Examples: Real-world use cases</li> <li>SwarmDataManager Guide: Master the data management features</li> </ul>"},{"location":"getting-started/quickstart/#need-help","title":"Need Help?","text":"<ul> <li>Check the troubleshooting section</li> <li>Browse examples for common use cases</li> <li>Open an issue on GitHub</li> </ul>"},{"location":"user-guide/basic-usage/","title":"Basic Usage","text":"<p>This guide covers the fundamental concepts and basic usage patterns for MagGeo.</p>"},{"location":"user-guide/basic-usage/#overview","title":"Overview","text":"<p>MagGeo annotates GPS trajectories with geomagnetic field data from ESA's Swarm satellite constellation. The basic workflow involves:</p> <ol> <li>Prepare GPS data in CSV format</li> <li>Configure parameters for your analysis</li> <li>Run annotation to add magnetic field data</li> <li>Analyze results with comprehensive geomagnetic information</li> </ol>"},{"location":"user-guide/basic-usage/#gps-data-requirements","title":"GPS Data Requirements","text":""},{"location":"user-guide/basic-usage/#required-columns","title":"Required Columns","text":"<p>Your GPS trajectory CSV file must contain:</p> <ul> <li>Latitude: Decimal degrees (-90 to +90)</li> <li>Longitude: Decimal degrees (-180 to +180)  </li> <li>Timestamp: Date and time information</li> <li>Optional: Height/altitude, individual/track ID</li> </ul>"},{"location":"user-guide/basic-usage/#supported-formats","title":"Supported Formats","text":"<pre><code>timestamp,latitude,longitude,height,individual_id\n2020-01-01 12:00:00,-45.123,123.456,100.5,bird_001\n2020-01-01 12:01:00,-45.124,123.457,101.2,bird_001\n2020-01-01 12:02:00,-45.125,123.458,99.8,bird_001\n</code></pre>"},{"location":"user-guide/basic-usage/#common-column-names","title":"Common Column Names","text":"<p>MagGeo accepts various column name formats:</p> Data Type Accepted Names Latitude <code>latitude</code>, <code>lat</code>, <code>y</code> Longitude <code>longitude</code>, <code>long</code>, <code>lon</code>, <code>x</code> Timestamp <code>timestamp</code>, <code>datetime</code>, <code>time</code>, <code>date_time</code> Height <code>height</code>, <code>altitude</code>, <code>alt</code>, <code>z</code>"},{"location":"user-guide/basic-usage/#basic-configuration","title":"Basic Configuration","text":""},{"location":"user-guide/basic-usage/#minimal-parameters","title":"Minimal Parameters","text":"<pre><code>import maggeo\n\nparams = {\n    'data_dir': 'data',                    # Directory containing GPS file\n    'gpsfilename': 'trajectory.csv',       # GPS file name\n    'lat_col': 'latitude',                 # Latitude column name\n    'long_col': 'longitude',               # Longitude column name\n    'datetime_col': 'timestamp',           # Timestamp column name\n    'token': 'your_vires_token'            # VirES access token\n}\n\n# Run annotation\nresult = maggeo.annotate_gps_with_geomag(params)\n</code></pre>"},{"location":"user-guide/basic-usage/#extended-parameters","title":"Extended Parameters","text":"<pre><code>params = {\n    # Required\n    'data_dir': 'data',\n    'gpsfilename': 'bird_trajectory.csv',\n    'lat_col': 'lat',\n    'long_col': 'lon', \n    'datetime_col': 'time',\n    'token': 'your_vires_token',\n\n    # Optional - Performance\n    'parallel': True,                      # Enable parallel processing\n    'n_cores': 4,                         # Number of CPU cores\n\n    # Optional - Data Management\n    'use_swarm_manager': True,            # Use persistent storage\n    'swarm_data_dir': 'swarm_cache',      # Storage directory\n    'swarm_manager_format': 'parquet',    # Storage format\n\n    # Optional - Quality Control\n    'quality_check': True,                # Validate data quality\n    'remove_outliers': False,             # Remove statistical outliers\n\n    # Optional - Processing\n    'satellites': ['A', 'B', 'C'],       # Swarm satellites to use\n    'interpolation_method': 'linear',     # Interpolation method\n    'include_indices': True,              # Add geomagnetic indices\n    'indices': ['AE', 'SME']              # Which indices to include\n}\n\nresult = maggeo.annotate_gps_with_geomag(params)\n</code></pre>"},{"location":"user-guide/basic-usage/#understanding-the-output","title":"Understanding the Output","text":""},{"location":"user-guide/basic-usage/#output-structure","title":"Output Structure","text":"<p>The annotated data contains your original GPS data plus magnetic field information:</p> <pre><code>print(result.columns.tolist())\n# ['timestamp', 'location-long', 'location-lat', 'height', 'individual_id',\n#  'TotalPoints', 'Minimum_Distance', 'Average_Distance', 'Kp',\n#  'N', 'E', 'C', 'N_Obs', 'E_Obs', 'C_Obs', 'H', 'D', 'I', 'F']\n</code></pre>"},{"location":"user-guide/basic-usage/#column-descriptions","title":"Column Descriptions","text":""},{"location":"user-guide/basic-usage/#original-gps-data","title":"Original GPS Data","text":"<ul> <li><code>timestamp</code>: Your original timestamp</li> <li><code>location-lat</code>, <code>location-long</code>: GPS coordinates</li> <li><code>height</code>: Altitude (if provided)</li> <li><code>individual_id</code>: Track identifier (if provided)</li> </ul>"},{"location":"user-guide/basic-usage/#trajectory-statistics","title":"Trajectory Statistics","text":"<ul> <li><code>TotalPoints</code>: Total points in trajectory</li> <li><code>Minimum_Distance</code>: Minimum distance between consecutive points (meters)</li> <li><code>Average_Distance</code>: Average distance between consecutive points (meters)</li> </ul>"},{"location":"user-guide/basic-usage/#geomagnetic-activity","title":"Geomagnetic Activity","text":"<ul> <li><code>Kp</code>: Planetary K-index (0-9 scale, geomagnetic activity level)</li> </ul>"},{"location":"user-guide/basic-usage/#magnetic-field-components-nec-frame","title":"Magnetic Field Components (NEC Frame)","text":"<ul> <li><code>N</code>: North component (nT) - CHAOS model</li> <li><code>E</code>: East component (nT) - CHAOS model</li> <li><code>C</code>: Center/Down component (nT) - CHAOS model</li> </ul>"},{"location":"user-guide/basic-usage/#observed-components","title":"Observed Components","text":"<ul> <li><code>N_Obs</code>: North component from Swarm observations (nT)</li> <li><code>E_Obs</code>: East component from Swarm observations (nT)</li> <li><code>C_Obs</code>: Center component from Swarm observations (nT)</li> </ul>"},{"location":"user-guide/basic-usage/#derived-parameters","title":"Derived Parameters","text":"<ul> <li><code>H</code>: Horizontal intensity = \u221a(N\u00b2 + E\u00b2) (nT)</li> <li><code>D</code>: Magnetic declination = arctan(E/N) (degrees)</li> <li><code>I</code>: Magnetic inclination = arctan(C/H) (degrees)</li> <li><code>F</code>: Total intensity = \u221a(N\u00b2 + E\u00b2 + C\u00b2) (nT)</li> </ul>"},{"location":"user-guide/basic-usage/#basic-analysis-examples","title":"Basic Analysis Examples","text":""},{"location":"user-guide/basic-usage/#view-summary-statistics","title":"View Summary Statistics","text":"<pre><code># Basic trajectory info\nprint(f\"Trajectory summary:\")\nprint(f\"  Total points: {len(result):,}\")\nprint(f\"  Duration: {result['timestamp'].max() - result['timestamp'].min()}\")\nprint(f\"  Average distance: {result['Average_Distance'].iloc[0]:.1f} meters\")\n\n# Magnetic field statistics\nprint(f\"\\nMagnetic field summary:\")\nprint(f\"  Total field range: {result['F'].min():.0f} - {result['F'].max():.0f} nT\")\nprint(f\"  Average total field: {result['F'].mean():.1f} nT\")\nprint(f\"  Horizontal field: {result['H'].mean():.1f} nT\")\n\n# Geomagnetic activity\nprint(f\"\\nGeomagnetic activity:\")\nprint(f\"  Kp range: {result['Kp'].min():.1f} - {result['Kp'].max():.1f}\")\nprint(f\"  Average Kp: {result['Kp'].mean():.2f}\")\n\nif result['Kp'].mean() &lt; 3:\n    print(\"  Conditions: Quiet\")\nelif result['Kp'].mean() &lt; 5:\n    print(\"  Conditions: Active\") \nelse:\n    print(\"  Conditions: Disturbed\")\n</code></pre>"},{"location":"user-guide/basic-usage/#simple-visualization","title":"Simple Visualization","text":"<pre><code>import matplotlib.pyplot as plt\n\n# Create basic plots\nfig, axes = plt.subplots(2, 2, figsize=(12, 8))\n\n# Trajectory map\naxes[0,0].plot(result['location-long'], result['location-lat'], 'b-', alpha=0.7)\naxes[0,0].set_xlabel('Longitude')\naxes[0,0].set_ylabel('Latitude')\naxes[0,0].set_title('GPS Trajectory')\naxes[0,0].grid(True, alpha=0.3)\n\n# Total magnetic field\naxes[0,1].plot(result['timestamp'], result['F'], 'r-', alpha=0.8)\naxes[0,1].set_xlabel('Time')\naxes[0,1].set_ylabel('Total Field F (nT)')\naxes[0,1].set_title('Magnetic Field Intensity')\naxes[0,1].tick_params(axis='x', rotation=45)\naxes[0,1].grid(True, alpha=0.3)\n\n# Geomagnetic activity\naxes[1,0].plot(result['timestamp'], result['Kp'], 'g-', linewidth=2)\naxes[1,0].set_xlabel('Time')\naxes[1,0].set_ylabel('Kp Index')\naxes[1,0].set_title('Geomagnetic Activity')\naxes[1,0].tick_params(axis='x', rotation=45)\naxes[1,0].grid(True, alpha=0.3)\n\n# Magnetic declination\naxes[1,1].plot(result['timestamp'], result['D'], 'purple', alpha=0.8)\naxes[1,1].set_xlabel('Time')\naxes[1,1].set_ylabel('Declination (degrees)')\naxes[1,1].set_title('Magnetic Declination')\naxes[1,1].tick_params(axis='x', rotation=45)\naxes[1,1].grid(True, alpha=0.3)\n\nplt.tight_layout()\nplt.show()\n</code></pre>"},{"location":"user-guide/basic-usage/#common-workflows","title":"Common Workflows","text":""},{"location":"user-guide/basic-usage/#workflow-1-quick-analysis","title":"Workflow 1: Quick Analysis","text":"<pre><code># Quick one-shot analysis\nimport maggeo\n\nparams = {\n    'data_dir': 'data',\n    'gpsfilename': 'my_trajectory.csv',\n    'lat_col': 'latitude',\n    'long_col': 'longitude',\n    'datetime_col': 'timestamp',\n    'token': 'your_vires_token'\n}\n\nresult = maggeo.annotate_gps_with_geomag(params)\n\n# Save results\nresult.to_csv('annotated_trajectory.csv', index=False)\nprint(\"\u2705 Results saved to annotated_trajectory.csv\")\n</code></pre>"},{"location":"user-guide/basic-usage/#workflow-2-persistent-storage","title":"Workflow 2: Persistent Storage","text":"<pre><code># For repeated analysis or multiple trajectories\nfrom maggeo import SwarmDataManager\n\n# Setup persistent storage\nmanager = SwarmDataManager(\"swarm_data\", file_format=\"parquet\")\n\n# Load GPS data\nimport pandas as pd\ngps_df = pd.read_csv('trajectory.csv')\ngps_df['timestamp'] = pd.to_datetime(gps_df['timestamp'])\n\n# Download Swarm data (once)\nswarm_a, swarm_b, swarm_c = manager.download_for_trajectory(\n    gps_df, token='your_vires_token'\n)\n\n# Later analysis sessions load instantly\ndata = manager.load_concatenated_data(['A', 'B', 'C'])\nprint(\"\u26a1 Loaded from storage - much faster!\")\n</code></pre>"},{"location":"user-guide/basic-usage/#workflow-3-large-dataset-processing","title":"Workflow 3: Large Dataset Processing","text":"<pre><code># For large trajectories (10,000+ points)\nparams = {\n    'data_dir': 'data',\n    'gpsfilename': 'large_trajectory.csv',\n    'lat_col': 'latitude',\n    'long_col': 'longitude',\n    'datetime_col': 'timestamp',\n    'token': 'your_vires_token',\n\n    # Enable optimization for large datasets\n    'parallel': True,               # Use multiple CPU cores\n    'n_cores': 4,                  # Adjust based on your system\n    'use_swarm_manager': True,     # Persistent storage\n    'swarm_data_dir': 'swarm_cache'\n}\n\nresult = maggeo.annotate_gps_with_geomag(params)\n</code></pre>"},{"location":"user-guide/basic-usage/#data-quality-considerations","title":"Data Quality Considerations","text":""},{"location":"user-guide/basic-usage/#check-data-completeness","title":"Check Data Completeness","text":"<pre><code># Check for missing values\nmissing_data = result.isnull().sum()\nprint(\"Missing data per column:\")\nprint(missing_data[missing_data &gt; 0])\n\n# Check magnetic field data quality\ncomplete_f = (~result['F'].isna()).sum()\nprint(f\"Complete F measurements: {complete_f}/{len(result)} ({complete_f/len(result)*100:.1f}%)\")\n</code></pre>"},{"location":"user-guide/basic-usage/#validate-results","title":"Validate Results","text":"<pre><code># Check reasonable magnetic field ranges\nf_range = [result['F'].min(), result['F'].max()]\nprint(f\"Total field range: {f_range[0]:.0f} - {f_range[1]:.0f} nT\")\n\n# Typical Earth magnetic field: 25,000 - 65,000 nT\nif f_range[0] &lt; 20000 or f_range[1] &gt; 70000:\n    print(\"\u26a0\ufe0f Warning: Magnetic field values outside typical Earth range\")\nelse:\n    print(\"\u2705 Magnetic field values within expected range\")\n\n# Check Kp index range\nkp_range = [result['Kp'].min(), result['Kp'].max()]\nprint(f\"Kp range: {kp_range[0]:.1f} - {kp_range[1]:.1f}\")\n\nif kp_range[1] &gt; 9:\n    print(\"\u26a0\ufe0f Warning: Kp values above maximum scale\")\nelse:\n    print(\"\u2705 Kp values within valid range\")\n</code></pre>"},{"location":"user-guide/basic-usage/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/basic-usage/#common-issues","title":"Common Issues","text":""},{"location":"user-guide/basic-usage/#issue-file-not-found","title":"Issue: \"File not found\"","text":"<pre><code># Check file path and name\nimport os\nfile_path = os.path.join(params['data_dir'], params['gpsfilename'])\nif os.path.exists(file_path):\n    print(f\"\u2705 File found: {file_path}\")\nelse:\n    print(f\"\u274c File not found: {file_path}\")\n    print(f\"Available files: {os.listdir(params['data_dir'])}\")\n</code></pre>"},{"location":"user-guide/basic-usage/#issue-column-not-found","title":"Issue: \"Column not found\"","text":"<pre><code># Check available columns\nimport pandas as pd\ngps_df = pd.read_csv(os.path.join(params['data_dir'], params['gpsfilename']))\nprint(f\"Available columns: {gps_df.columns.tolist()}\")\n\n# Update column names\nparams['lat_col'] = 'lat'  # Adjust as needed\nparams['long_col'] = 'lon'\nparams['datetime_col'] = 'time'\n</code></pre>"},{"location":"user-guide/basic-usage/#issue-invalid-vires-token","title":"Issue: \"Invalid VirES token\"","text":"<pre><code># Test token validity\ntry:\n    from viresclient import SwarmRequest\n    request = SwarmRequest()\n    request.set_token(token=params['token'])\n    print(\"\u2705 VirES token is valid\")\nexcept Exception as e:\n    print(f\"\u274c VirES token error: {e}\")\n    print(\"Get a new token at: https://vires.services/\")\n</code></pre>"},{"location":"user-guide/basic-usage/#performance-tips","title":"Performance Tips","text":""},{"location":"user-guide/basic-usage/#for-small-datasets-1000-points","title":"For Small Datasets (&lt; 1,000 points)","text":"<ul> <li>Use default settings</li> <li>No need for parallel processing</li> <li>CSV format is fine</li> </ul>"},{"location":"user-guide/basic-usage/#for-medium-datasets-1000-10000-points","title":"For Medium Datasets (1,000 - 10,000 points)","text":"<ul> <li>Consider using SwarmDataManager</li> <li>Parquet format recommended</li> <li>Parallel processing optional</li> </ul>"},{"location":"user-guide/basic-usage/#for-large-datasets-10000-points","title":"For Large Datasets (&gt; 10,000 points)","text":"<ul> <li>Always use SwarmDataManager</li> <li>Enable parallel processing</li> <li>Use Parquet format</li> <li>Consider processing in chunks</li> </ul>"},{"location":"user-guide/basic-usage/#next-steps","title":"Next Steps","text":"<ul> <li>Advanced Features: See SwarmDataManager Guide for persistent storage</li> <li>Performance: Check Parallel Processing Guide for large datasets</li> <li>Examples: View Basic Examples for practical use cases</li> <li>API Reference: Consult Core Functions for detailed documentation</li> </ul>"}]}