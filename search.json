[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MagGeo - Annotate geo-magnetic satellite data with GPS trajectories",
    "section": "",
    "text": "What’s MagGeo\n\nMagGeo is a tool that helps ecologists or animal movement researchers to link earth’s magnetic field data from satellite source to GPS trajectories. Inspired by the Environmental Data Automated Track Annotation System (Env-DATA) Service a tool from Movebank and help researcher to get a better understanding about the geomagnetic variations across the GPS trajectories.\nMagGeo is entirely built-in python and includes a two Jupyter Notebooks that offer two ways to link GPS tracks with the geomagnetic components using the data from one of the up-to-date satellite sources - Swarm Constellation. MagGeo will create an enriched GPS track with the following components:\n\nLatitude from the GPS Track.\nLongitude from the GPS Track.\nTimestamp from the GPS Track.\nMagnetic Field Intensity mapped as Fgps in nanoTeslas (nT).\nN (Northwards) component mapped as N in nanoTeslas (nT).\nE (Eastwards) component mapped as E. in nanoteslas (nT).\nC (Downwards or Center) component mapped as C in nanoTeslas (nT).\nHorizontal component mapped as H in nanoTeslas (nT).\nMagnetic Declination or dip angle mapped as D in degrees\nMagnetic Inclination mapped as I in degrees\nKp Index mapped as kp\nTotal Points as the amount of Swarm measures included in the ST-IDW process from the trajectories requested in the three satellites.\nMinimum Distance mapped as MinDist, representing the minimum distance amount the set of identified point inside the Space Time cylinder and each GPS point location.\nAverage Distance mapped as AvDist, representing the average distance amount the set of distances between the identified Swarm Point in the Space Time cylinder and the GPS Points location.\n\nResearchers, particularly ecologists now can study the annotated table to analyze the geomagnetic Spatio-temporal variation across any GPS trajectory.\n\n\nSuggestions?\nMagGeo is work in progress and we are constantly making improvements that you can follow up with the commits made in the pubic GitHub repo. For general inquiries, scientific concepts, suggestions please email: Fernando.Benitez@st-andrews.ac.uk, ud2@st-andrews.ac.uk, jed.long@uwo.ca\nFor errors, or improvements please submit an issue in this repo, describing the problem.",
    "crumbs": [
      "Home",
      "What's MagGeo"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "About MagGeo",
    "section": "",
    "text": "Inspired by The Environmental Data Automated Track Annotation System (Env-DATA) Service a tool on Movebank, where ecologists and animal movement researchers all over the world can link movement data with global environmental datasets. Including hundreds of variables from a diverse set of data sources including the European Space Agency (ESA), the National Aeronautics and Space Administration (NASA), the US National Oceanic and Atmospheric Administration (NOAA), and others. EnvData allow researchers to annotate in space and time multiples environmental information to enrich their GPS tracks to analyze the influence of several environmental variables in the trajectory. Using the Env-DATA Track Annotation Service registered users on MoveBank are able to get environmental parameters—such as wind conditions, land use, vegetation, and snow cover—for the whole world. Using different interpolation methods users can include multiple environment variables selecting from a comprehensive list of datasets (you can browse the available dataset here).\nThe second element that inspired MagGeo is having a tool to help researcher to get a better understanding over how the earth’s magnetic field is being used by birds as one of their navigational strategies. Despite of there are several approach in this regards we know still have little knowledge about how birds can use the influence of the magnetic field for their migration patterns, especially for those long-distance migratory animals. Other studies have been reflecting into the magnetic field influence based on magnetic field estimation models, or using some displacement experiments with particular species. The disadvantage of those previous studies is the magnetic field is a highly dynamic force that have different impact around the earth every day. Having said that MagGeo wants to take advantage of what is considered best survey of the geomagnetic field and its temporal evolution - Swarm Constellation. Swarm is a ESA’s magnetic field mission, launched on 22 November 2013, consists of the three identical Swarm satellites (Alpha, Bravo, and Charlie). Swarm A and C flying side-by-side (1.4° separation in longitude) at an altitude of 462 km (initial altitude) and Swarm B at higher orbit of 511 km (initial altitude) are equipped with the following set of identical instruments.\nThe data products available from Swarm are Level 1b and Swarm Level 2 products. These products include Swarm magnetic field models, ionospheric and thermospheric products, and others. MagGeo use the Swarm Level 1b data product as the corrected and formatted output from each of the three Swarm satellites. For more information about the Swarm Data Products click here.\nMagGeo has been deployed using a set of Jupyter notebooks a powerful tool to run a python environment. Completely build in python 3.8 MagGeo is a well described program that will guide you through several steps to annotate your GPS trajectories with the geomagnetic field components reported by Swarm. You can access to Swarm Data products via HTTP or FTP using :\n\nvia any HTTP browser at http://swarm-diss.eo.esa.int\ndirectly via an ftp client at ftp://swarm-diss.eo.esa.int\n\nHowever MagGeo use VirES (Virtual environments for Earth Scientists) a platform for data & model access, analysis, and visualisation for ESA’s magnetic mission Swarm. This is a powerful client with the viresclient API that provide several classes and methods defined in the vires client package. The viresclient Python package allows you to connect to the VirES server to download Swarm data and data calculated using magnetic models.",
    "crumbs": [
      "Home",
      "About MagGeo"
    ]
  },
  {
    "objectID": "installation.html",
    "href": "installation.html",
    "title": "Installing MagGeo",
    "section": "",
    "text": "What You’ll Need\nMagGeo is a specialized tool that helps researchers analyze magnetic field data in relation to animal movement patterns. This guide will walk you through installing MagGeo on your computer, even if you’re more familiar with R than Python.\nBefore we begin, understand that MagGeo is currently built using Python (similar to how some R packages depend on specific R versions). We’ll set up a contained environment so it won’t interfere with any existing R installations or other software on your computer.",
    "crumbs": [
      "Home",
      "How to use it",
      "Installing MagGeo"
    ]
  },
  {
    "objectID": "installation.html#step-1-install-miniconda-your-python-environment-manager",
    "href": "installation.html#step-1-install-miniconda-your-python-environment-manager",
    "title": "Installing MagGeo",
    "section": "Step 1: Install Miniconda (Your Python Environment Manager)",
    "text": "Step 1: Install Miniconda (Your Python Environment Manager)\nWhat is Miniconda? Think of Miniconda as a package manager for Python, similar to how CRAN manages R packages. It creates isolated environments so different projects don’t conflict with each other.\n\nFor Windows Users:\n\nVisit https://docs.conda.io/en/latest/miniconda.html\nDownload the “Miniconda3 Windows 64-bit” installer\nRun the downloaded .exe file as administrator\nFollow the installation wizard:\n\nAccept the license agreement\nChoose “Just Me” installation\nUse the default installation location\nImportant: Check “Add Miniconda3 to my PATH environment variable” (even if it shows a warning)\n\nClick “Install” and wait for completion\n\n\n\nFor macOS Users:\n\nVisit https://docs.conda.io/en/latest/miniconda.html\nDownload the “Miniconda3 macOS 64-bit pkg” installer\nDouble-click the downloaded .pkg file\nFollow the installation wizard using default settings\nThe installer will automatically add conda to your PATH\n\nVerification: After installation, open a new terminal (macOS) or Command Prompt (Windows) and type conda --version. You should see a version number.",
    "crumbs": [
      "Home",
      "How to use it",
      "Installing MagGeo"
    ]
  },
  {
    "objectID": "installation.html#step-2-clone-maggeo",
    "href": "installation.html#step-2-clone-maggeo",
    "title": "Installing MagGeo",
    "section": "Step 2: Clone MagGeo",
    "text": "Step 2: Clone MagGeo\nYou will need to clone the MagGeo repository in your local computer (we are currently working to make make MagGeo available in pip to an easier installation), for now simply clone it and you will have access to all MagGeo.\nIf you don’t have Git, or you are not use to work with version control, you will need to install git to clone any repository from GitHub\n\n\n\n\n\n\nInstalling Git\n\n\n\n\n\nWhat is Git? Git is like a sophisticated “track changes” system for code, similar to version control in collaborative documents. We need it to download the MagGeo software.\n\nFor Windows Users:\n\nVisit https://git-scm.com/downloads\nDownload “Git for Windows”\nRun the installer with these recommended settings:\n\nSelect “Use Git from the Windows Command Prompt”\nChoose “Checkout Windows-style, commit Unix-style line endings”\nUse all other default settings\n\n\n\n\nFor macOS Users:\nOption A (Recommended):\n1. Open Terminal (found in Applications &gt; Utilities)\n2. Type git --version and press Enter\n3. If Git isn’t installed, macOS will prompt you to install Xcode Command Line Tools\n4. Click “Install” and follow the prompts\nOption B:\n1. Visit https://git-scm.com/downloads\n2. Download “Git for macOS”\n3. Run the installer with default settings\n\n\n\n\n\nFor Both Windows and macOS Users:\n\nOpen your command line interface:\n\nWindows: Press Windows + R, type cmd, press Enter\nmacOS: Press Cmd + Space, type “Terminal”, press Enter\n\nNavigate to your desired location (optional but recommended):\n# Windows users:\ncd C:\\Users\\YourUsername\\Documents\n\n# macOS users:\ncd ~/Documents\nDownload MagGeo:\ngit clone https://github.com/MagGeo/MagGeo-Annotation-Program.git\nThis creates a folder called “MagGeo-Annotation-Program” with all the necessary files.",
    "crumbs": [
      "Home",
      "How to use it",
      "Installing MagGeo"
    ]
  },
  {
    "objectID": "installation.html#step-4-navigate-to-the-maggeo-folder",
    "href": "installation.html#step-4-navigate-to-the-maggeo-folder",
    "title": "Installing MagGeo",
    "section": "Step 4: Navigate to the MagGeo Folder",
    "text": "Step 4: Navigate to the MagGeo Folder\ncd MagGeo-Annotation-Program",
    "crumbs": [
      "Home",
      "How to use it",
      "Installing MagGeo"
    ]
  },
  {
    "objectID": "installation.html#step-5-create-the-maggeo-environment",
    "href": "installation.html#step-5-create-the-maggeo-environment",
    "title": "Installing MagGeo",
    "section": "Step 5: Create the MagGeo Environment",
    "text": "Step 5: Create the MagGeo Environment\nThis creates a specialized Python environment with all the specific packages MagGeo needs, similar to installing a comprehensive R package with all its dependencies.\nconda env create --file environment.yml\n\n\n\n\n\n\nWarning\n\n\n\nThis process will take 5-10 minutes as it downloads and installs all required components. You’ll see progress messages - this is normal.",
    "crumbs": [
      "Home",
      "How to use it",
      "Installing MagGeo"
    ]
  },
  {
    "objectID": "installation.html#step-6-activate-the-maggeo-environment",
    "href": "installation.html#step-6-activate-the-maggeo-environment",
    "title": "Installing MagGeo",
    "section": "Step 6: Activate the MagGeo Environment",
    "text": "Step 6: Activate the MagGeo Environment\nEvery time you want to use MagGeo, you’ll need to “activate” its environment first:\nconda activate MagGeoEnv\nWhat this does: Switches your command line to use the MagGeo-specific Python environment, ensuring all the right tools are available.",
    "crumbs": [
      "Home",
      "How to use it",
      "Installing MagGeo"
    ]
  },
  {
    "objectID": "installation.html#step-7-set-up-vires-access-magnetic-field-data",
    "href": "installation.html#step-7-set-up-vires-access-magnetic-field-data",
    "title": "Installing MagGeo",
    "section": "Step 7: Set Up VirES Access (Magnetic Field Data)",
    "text": "Step 7: Set Up VirES Access (Magnetic Field Data)\nWhat is VirES? VirES provides access to satellite magnetic field data from ESA’s Swarm mission. Think of it as a specialized database for magnetic field measurements that MagGeo uses to understand the magnetic environment your animals experienced.\nMagGeo use VirES (Virtual environments for Earth Scientists) a platform for data & model access, analysis, and visualization for ESA’s magnetic mission Swarm. This is a powerful client with the viresclient API that provide several classes and methods defined in the vires client package. The viresclient Python package allows you to connect to the VirES server to download Swarm data and data calculated using magnetic models.\n\nCreate Your VirES Account:\n\nSign up: Visit https://vires.services/oauth/accounts/signup/\n\nUse your institutional email if possible\nCreate a secure password\nVerify your email address\n\nLog in: Go to https://vires.services/\nGet your access token:\n\nFollow the detailed instructions at https://viresclient.readthedocs.io/en/latest/access_token.html\nYour token is like a password that allows MagGeo to download data for you\nImportant: Keep this token secure and don’t share it\n\nConfigure MagGeo with your token:\n# Replace YOUR_TOKEN_HERE with your actual token\nviresclient set_token --token YOUR_TOKEN_HERE",
    "crumbs": [
      "Home",
      "How to use it",
      "Installing MagGeo"
    ]
  },
  {
    "objectID": "installation.html#testing-your-installation",
    "href": "installation.html#testing-your-installation",
    "title": "Installing MagGeo",
    "section": "Testing Your Installation",
    "text": "Testing Your Installation\nTo verify everything is working:\n\nMake sure you’re in the MagGeo directory and the environment is activated\nTry running a simple test (specific commands will depend on MagGeo’s documentation)",
    "crumbs": [
      "Home",
      "How to use it",
      "Installing MagGeo"
    ]
  },
  {
    "objectID": "installation.html#troubleshooting-common-issues",
    "href": "installation.html#troubleshooting-common-issues",
    "title": "Installing MagGeo",
    "section": "Troubleshooting Common Issues",
    "text": "Troubleshooting Common Issues\n\nWindows-Specific Issues\nProblem: “conda is not recognized as an internal or external command”\n\nSolution: Miniconda wasn’t added to PATH during installation\nFix: Reinstall Miniconda and ensure you check “Add Miniconda3 to my PATH environment variable”\n\nProblem: “Permission denied” errors\n\nSolution: Run Command Prompt as Administrator\nFix: Right-click Command Prompt and select “Run as administrator”\n\nProblem: Long path names causing issues\n\nSolution: Install MagGeo in a shorter path like C:\\MagGeo\n\n\n\nmacOS-Specific Issues\nProblem: “command not found: conda”\n\nSolution: Terminal doesn’t recognize conda\nFix: Close and reopen Terminal, or run source ~/.bash_profile\n\nProblem: “Permission denied” during Git clone\n\nSolution: You don’t have write permissions in the current directory -\nFix: Navigate to your home directory first: cd ~\n\nProblem: Xcode Command Line Tools installation fails\n\nSolution: Install Xcode from the App Store first, then try again\n\n\n\nGeneral Issues\nProblem: Environment creation fails with package conflicts\n\nSolution: Clear conda cache and try again\nFix: Clean your conda enviroment cache and reinstall the MagGeo environment.\n\n`conda clean --all`\n\n`conda env create --file environment.yml`\nProblem: VirES token authentication fails\n\nSolution: Token might be incorrect or expired\nFix: Generate a new token from the VirES website and reconfigure\n\nProblem: Git clone fails with “Repository not found”\n\nSolution: Check your internet connection and the repository URL\nFix: Try cloning again, or download the ZIP file directly from GitHub",
    "crumbs": [
      "Home",
      "How to use it",
      "Installing MagGeo"
    ]
  },
  {
    "objectID": "installation.html#reporting-an-issue",
    "href": "installation.html#reporting-an-issue",
    "title": "Installing MagGeo",
    "section": "Reporting an Issue",
    "text": "Reporting an Issue\nIf you encounter issues not covered here:\n\nBefore Reporting an Issue:\n\nNote your operating system (Windows 10/11, macOS version)\nCopy any error messages exactly as they appear\nNote which step in the installation process failed\n\n\n\nHow to Report an Issue:\n\nVisit https://github.com/MagGeo/MagGeo-Annotation-Program/issues\nClick “New Issue”\nChoose “Bug report” or “Installation help”\nProvide a clear title like “Installation fails at Step 5 on Windows 11”\nInclude:\n\nYour operating system\nThe exact error message\nWhat you were trying to do when the error occurred\nScreenshots if helpful",
    "crumbs": [
      "Home",
      "How to use it",
      "Installing MagGeo"
    ]
  },
  {
    "objectID": "installation.html#next-steps",
    "href": "installation.html#next-steps",
    "title": "Installing MagGeo",
    "section": "Next Steps",
    "text": "Next Steps\nOnce installation is complete:\n\nRead the MagGeo user guide for analysis workflows\nPrepare your animal movement data according to the format requirements\n\n\n\n\n\n\n\nTip\n\n\n\nRemember: You only need to install MagGeo once, but you’ll need to activate the environment (conda activate MagGeoEnv) each time you want to use it.",
    "crumbs": [
      "Home",
      "How to use it",
      "Installing MagGeo"
    ]
  },
  {
    "objectID": "using_maggeo.html",
    "href": "using_maggeo.html",
    "title": "Run MagGeo using the sample data",
    "section": "",
    "text": "MagGeo can be executed using the same terminal you have been using in the previous steps. If you want to get familiar with MagGeo and get an annotated GPS trajectory using the data we have included as an example (data folder), run the following command (replace your virES token where is requiered):\npython MagGeo_main.py -p parameters/default.yml --token YOUR_TOKEN_HERE\nNow MagGeo will start to download the Swarm Data.\n\nOnce the data has been downloaded, MagGeo will process it to make the annotation process ( for more information about how this is done, visit our methodological paper in Movement Ecology)\nThe last step MagGeo does is annotating the gathered data, that would take more time depending how big is your dataset. In our example it only takes 4 seconds.\n\nAnd Congrats you got annotated data. The results will be stored in the folder results for your futher analysis. You will find a .csv file named like GeoMagResult_+name_of_your_csv_file_trajectory.\n\nRun MagGeo using your data.\nIf you are ready to annotate your GPS trajectories. You need to update the parameters file in MagGeo to let the program know what are the correct values of your data.\n\nCopy the csv file with your trajectories into the data folder.\nOpen and Update the following parameters in the file default.yml located in parameters folder:\ngpsfilename: \"name_of_your_trajectory.cvs\" Include the name of your Input data. The GPS trajectory you need to annotate with the geomagnetic satellite data.\nLat: \"latitude_column_name_in_your_trajectory\"\nLong: \"longitude_column_name_in_your_trajectory\"\nDateTime: \"Date_Time_column_name_in_your_trajectory\" make sure you have one column that includes Date and Time values together.\naltitude: \"altitude_column_name_in_your_trajectory\" if you do not have any altitute column, you can leave that in blank, including only \"\"\n\nSave your changes, return to the Terminal and run:\npython MagGeo_main.py -p parameters/default.yml --token YOUR_TOKEN_HERE\n\n\nRun MagGeo step by step, using Jupyter Notebook.\nMagGeo includes a set of Jupyter Notebooks, you will find four notebooks (.ipynp) in the Notebooks folder.\n\nIn a Terminal, make sure you are using MagGeoEnv environment, and run:\n\njupyter notebook\nA Jupyter Notebook dashboard will comes out in your browser locally (e.g. http://localhost:8888) then you can explore MagGeo and its content. Go to Notebooks folder and open any of the following notebook for a step by step process. You can add cells to make your own test or analysis, but be aware that any change you do at the code migth affects the correct performance of the program.\n\n\nMain Notebook : An initial and descriptive notebook where you can get detail information about MagGeo, the sample data used, background concepts and software requirements.\nSequential Mode: Annotation Notebook applying a sequential mode. Using a traditional loop to going through the GPS track rows and process every row computing the magnetic components. Particularly useful for small datasets.\nParallel Mode: If you have a “big” dataset ( e.g. 1 million of records) you might want try the parallel mode. The parallel mode has some differences when you run the required libraries in a windows or Linux environment. We have tested MagGeo in a windows server environment.\nNotebook basics: If you are not familiar with Jupiter Notebooks and want to learn about the basics over how to run the notebooks before try the annotate tool. You can try this notebook to get the basics elements to run cells, read data, and plot some a basic chart.\n\nThe following image will help you to understand how the sequential and parallel mode differ, and how in parallel mode you should be able to use the full capacity of your machine. However it is quite important to identify when we need to use a parallel mode. For small datasets running MagGeo in Parallel mode could be even slower than the sequential mode.",
    "crumbs": [
      "Home",
      "How to use it",
      "Run MagGeo using the sample data"
    ]
  },
  {
    "objectID": "data_requirements.html",
    "href": "data_requirements.html",
    "title": "Data requirements",
    "section": "",
    "text": "Important\n\n\n\n🔎 Your trajectory must be in a csv format:\nThere are three columns that must be included in your GPS trajectory. Make sure your GPS trajectory includes Latitude , Longitude and timestamp. We suggest that the Timestamp column follow the day/month/year Hour:Minute (dd/mm/yyyy HH:MM:SS) format, Latitude and Longitude should be in decimal degrees (WGS84). If you have a altitude attribute, make sure that the units are in kilometers. Other columns will be ignored. Here it is an example of how your GPS track should looks like.\n\nFor this example we are reading the BirdGPSTrajectory.csv file. If you want to run the method using your own csv file, make sure you store your the file in the /data folder. For more information about the dataset we used in this example go to the Main Notebook.\n\n\n\nDataset used as use-case\nMagGeo comes with a dataset for the use case you see in the notebook outputs. This dataset comes from the MoveBank Data Repository (https://www.datarepository.movebank.org/)[1][2].\nWe annotated tracking data of greater white-fronted geese (Anser albifrons), which migrate between northern Germany and the Russian Arctic. We annotated data for fifteen individuals in a single autumn migration (42 days) a total of 973 GPS location.\n[1] Kölzsch A, Müskens GJDM, Kruckenberg H, Glazov P, Weinzierl R, Nolet BA, Wikelski M (2016) Towards a new understanding of migration timing: slower spring than autumn migration in geese reflects different decision rules for stopover use and departure. Oikos. doi:10.1111/oik.03121\n[2] Kölzsch A, Kruckenberg H, Glazov P, Müskens GJDM, Wikelski M (2016) Data from: Towards a new understanding of migration timing: slower spring than autumn migration in geese reflects different decision rules for stopover use and departure. Movebank Data Repository. doi:10.5441/001/1.31c2v92f",
    "crumbs": [
      "Home",
      "How to use it",
      "Data requirements"
    ]
  },
  {
    "objectID": "background.html",
    "href": "background.html",
    "title": "Key Concepts",
    "section": "",
    "text": "1. Animal Navigation Fundamentals\nThis is not a comprehensive book related to animal navigation fundamental, however there are certain concepts you might want to recall and understand that establish the foundations of what you have built MagGeo.",
    "crumbs": [
      "Home",
      "The science behind",
      "Key Concepts"
    ]
  },
  {
    "objectID": "background.html#animal-navigation-fundamentals",
    "href": "background.html#animal-navigation-fundamentals",
    "title": "Key Concepts",
    "section": "",
    "text": "True Navigation\nLong-distance migratory navigation represents one of nature’s most remarkable phenomena, consisting of two primary components that work together to enable animals to travel vast distances with inexplicable precision. The first component, is compass orientation, involves determining the correct direction of movement relative to environmental cues (where to go). The second component, geographic positioning, requires animals to know their current location at any specific time during their journey (where am I)¹.\nThese mechanisms together support what Ecologists term “true navigation” - defined as the ability to find the way to a distant, unknown location using only cues that are available locally at the animal’s current position².\n\n\nNavigation Mechanisms\nMigratory animals (e.g Birds) have evolved sophisticated sensory systems that can detect and interpret multiple environmental cues for navigation purposes (Demšar, Zein, and Long 2025). These cues fall into two primary categories based on their navigational function:\nFor Compass Orientation: Animals use several types of compass systems to maintain consistent directional movement:\n\nSolar compass: Utilizes the Sun’s position, accounting for its apparent movement across the sky and seasonal variations\nStellar compass: Relies on star patterns and celestial rotation, particularly useful during nighttime migration\nPolarized light patterns: Detects polarization patterns in skylight that remain consistent relative to the Sun’s position\nEarth’s magnetic field: Uses the planet’s magnetic field as a reliable directional reference³⁻⁴\n\nFor Geographic Positioning: To determine their specific location, animals can access several types of positional cues:\n\nEarth’s magnetic field: Utilizes spatial gradients and patterns in Earth’s magnetic field intensity and inclination³\nOlfactory cues: Chemical signatures that vary geographically, creating olfactory landscapes⁵⁻⁶\nVisual landmarks: Topographical features, coastlines, and other geographical markers⁷\nInfrasound: Low-frequency sound waves that can travel long distances and vary by location¹",
    "crumbs": [
      "Home",
      "The science behind",
      "Key Concepts"
    ]
  },
  {
    "objectID": "background.html#geomagnetic-navigation",
    "href": "background.html#geomagnetic-navigation",
    "title": "Key Concepts",
    "section": "2. Geomagnetic Navigation",
    "text": "2. Geomagnetic Navigation\nGeomagnetic navigation represents a strategy whereby animals use information derived from Earth’s magnetic field for either compass orientation, geographic positioning, or both functions simultaneously³. This navigational mechanism has been documented across an taxonomic range, suggesting it evolved independently multiple times or represents an ancient, conserved ability.\nEvidence for geomagnetic navigation exists across diverse taxa:\n\nBirds: From songbirds to seabirds, with extensive experimental evidence¹⁻⁷\nFish: Including both oceanic and freshwater species⁹\nSea turtles: Particularly well-documented in marine navigation⁸⁻¹⁰\nTerrestrial mammals: From small rodents to large ungulates¹¹⁻¹²\nMarine mammals: Including whales and dolphins¹³⁻¹⁴\n\nHowever the study of geomagnetic navigation employs two primary methodological approaches, each with distinct advantages and limitations:\nLab Experiments: Controlled studies where animals are placed in artificial magnetic field to examine how magnetic parameters influence the onset and direction of migratory behavior. Laboratory experiments provide exceptional precision and experimental control, allowing researchers to manipulate specific magnetic parameters while holding other variables constant²⁻⁷⁻¹⁵⁻¹⁷. However, the observed behaviors in such controlled environments differ significantly from what occurs in wild¹. Additionally, these studies typically focus on small numbers of individuals from single species, which limits the results across multiple species¹⁹.\nField Studies with Tracking: Modern migration research employs tracking technologies, particularly GPS tags combined with displacement experiments. These approaches provide greater ecological relevance by studying animals in their natural environments¹⁸⁻²⁰⁻²¹. However, most tracking studies have been limited by their reliance on static representations of the geomagnetic field (space and temporal), failing to account for the dynamic temporal variations that may influence animal navigation²².",
    "crumbs": [
      "Home",
      "The science behind",
      "Key Concepts"
    ]
  },
  {
    "objectID": "background.html#earths-magnetic-field",
    "href": "background.html#earths-magnetic-field",
    "title": "Key Concepts",
    "section": "3. Earth’s Magnetic Field",
    "text": "3. Earth’s Magnetic Field\nEarth’s magnetic field is a complex, dynamic system that results from the superposition of magnetic fields originating from multiple sources. Understanding this complex environmental variable is crucial for comprehending how animals use magnetic data for navigation. The total magnetic field at any location and time results from the combination of three primary components, each with different characteristics, spatial patterns, and temporal behaviors³⁴.\nCore Field: The dominant contributor to Earth’s magnetic field is the core field, generated by the geodynamo mechanism operating within Earth’s outer liquid core. This field arises from the motion of electrically conductive molten iron as it circulates within the outer core, driven by thermal convection and the planet’s rotation. The core field exhibits a broadly dipolar structure on large scales, resembling that of a giant bar magnet tilted approximately 11 degrees from Earth’s rotational axis. However, this apparent simplicity masks considerable complexity in the detailed structure, with significant non-dipolar components that create regional variations in field strength and direction across the globe.\nThe core field dominates the total magnetic field at Earth’s surface, typically contributing over 98% of the field strength at any location. This field undergoes gradual changes over time scales of years to decades, known as secular variation, as the circulation patterns within the outer core evolve. These long-term changes can amount to tens of nanoTesla per year at any given location, representing a slow but persistent evolution of the magnetic environment that animals experience.\nLithospheric Field: The lithospheric or crustal field originates from the magnetic properties of rocks within Earth’s crust. Certain minerals, particularly magnetite and other iron-bearing compounds, became magnetized when they formed and retain this magnetization over geological time scales. The lithospheric field creates local and regional magnetic anomalies - areas where the magnetic field strength or direction differs noticeably from what would be expected from the core field alone.\nThese magnetic anomalies can range from subtle variations of a few nanoTesla to dramatic variations of thousands of nanoTesla over distances of kilometers to hundreds of kilometers. The lithospheric field is considered essentially static over time periods relevant to animal lifespans, changing only over geological time scales of millennia or longer. For migratory animals, these crustal magnetic signatures provide potentially stable, location-specific magnetic features that could serve as magnetic landmarks or components of magnetic maps.\nExternal Fields: External magnetic fields result from electrical current systems flowing in Earth’s ionosphere and magnetosphere, driven by interactions between the solar wind and Earth’s magnetic field. These fields exhibit the most dynamic behavior of the three components, varying on time scales from seconds to days. The external field contributions include both regular, predictable daily variations and irregular disturbances associated with space weather events.\nThe regular daily variations, known as Sq (solar quiet) currents, result from the regular heating of the ionosphere by solar radiation, which creates predictable current systems that vary with local time and season. These regular variations typically amount to 20-30 nanoTesla at mid-latitudes but can be significantly larger at high latitudes near the magnetic poles.\nFigure 1 showing magnetic field components and coordinate system, NOOA, https://www.ncei.noaa.gov/news/HDGM\n\nMagnetic Field Measurements and Coordinate Systems\nScientists measure Earth’s magnetic field using a standardized coordinate system that allows for consistent description and comparison of magnetic field vectors worldwide. The magnetic field vector B is decomposed into components using the North-East-Centre (NEC) coordinate system, also known as the local geodetic coordinate system.\nIn this system, measurements are made relative to the local geographic reference frame at each point on Earth’s surface. The North component points toward geographic north (true north), the East component points toward geographic east, and the Centre component points radially downward toward Earth’s center. This coordinate system provides a consistent framework for describing magnetic field variations across the globe and through time.\nFrom these three orthogonal components, several important magnetic field parameters are derived:\n\nIntensity (F): The magnitude or total strength of the magnetic field vector B, representing the length of the vector in three-dimensional space\nInclination (I): The angle between the magnetic field vector B and its horizontal component H, measuring how steeply the field lines plunge into or emerge from Earth\nDeclination (D): The angle between the horizontal component H and geographic north, indicating how much magnetic north deviates from geographic north\nHorizontal component (H): The horizontal projection of the magnetic field vector, representing the component parallel to Earth’s surface\n\nThese parameters provide different types of information that animals might potentially use for navigation. Intensity varies systematically with latitude and can provide positional information, while inclination also varies predictably with latitude and could serve as a magnetic latitude indicator. Declination provides information about magnetic versus geographic north, potentially useful for compass orientation.",
    "crumbs": [
      "Home",
      "The science behind",
      "Key Concepts"
    ]
  },
  {
    "objectID": "background.html#spatial-and-temporal-variation",
    "href": "background.html#spatial-and-temporal-variation",
    "title": "Key Concepts",
    "section": "4. Spatial and Temporal Variation",
    "text": "4. Spatial and Temporal Variation\n\nGlobal Spatial Patterns\nIntensity: The total magnetic field intensity shows global patterns that reflects the underlying dipolar structure of the core field. At the magnetic equators, where the field lines run horizontally, the total intensity reaches its minimum values of approximately 23,000 nanoTesla. Moving toward higher magnetic latitudes, the field intensity gradually increases as the field lines become more vertical, reaching maximum values of approximately 62,000 nanoTesla near the magnetic poles.\nThis variation in intensity with magnetic latitude creates what researchers term “isodynamic lines” - contours of equal magnetic intensity that generally run east-west but show considerable deviation from simple latitudinal bands due to non-dipolar components of the field. These intensity gradients are steep enough that animals traveling north-south distances of hundreds of kilometers would encounter measurable changes in field intensity.\nInclination: Magnetic inclination, the angle at which field lines plunge into Earth, provides perhaps the most systematic navigational cue available from the geomagnetic field. At the magnetic equator, field lines run horizontally, giving inclination values near zero degrees. Moving toward the magnetic poles, inclination increases progressively, reaching 90 degrees (vertical) at the magnetic poles themselves.\nThis relationship between inclination and magnetic latitude has led researchers to propose that inclination serves as a primary magnetic coordinate for animal navigation. The inclination gradient is steep enough that latitudinal movements of tens of kilometers produce detectable changes in inclination angle, potentially providing fine-scale positional information.\nDeclination: Magnetic declination on the other side, the deviation of magnetic north from geographic north, shows the most complex spatial patterns of the major magnetic field components. Unlike intensity and inclination, declination does not follow simple latitudinal patterns but instead shows regional variations that reflect the non-dipolar components of the core field and crustal magnetic anomalies.\nIn some regions, declination changes very gradually over large distances, while in other areas it can change by several degrees over distances of hundreds of kilometers. These declination patterns create distinctive regional magnetic signatures that could potentially serve as magnetic landmarks for animal navigation systems.\n\n\n\nTemporal Variations\nThe temporal behavior of Earth’s magnetic field spans an enormous range of time scales, from rapid variations lasting seconds to gradual changes occurring over geological time. Understanding these temporal variations is crucial for reading how animals use magnetic data for navigation.\nQuiet-Time Variations: Even during geomagnetically quiet periods, Earth’s magnetic field shows regular daily variations driven by solar heating of the ionosphere. During daylight hours, solar ultraviolet radiation ionizes atmospheric gases, creating electrical conductivity that allows current systems to flow in the ionosphere. These currents generate magnetic fields that add to the main field measured at Earth’s surface.\nThe amplitude of these quiet-time variations depends strongly on latitude and local time. At mid-latitudes, typical daily variations amount to approximately 20 nanoTesla, with maximum variations occurring during local noon when ionospheric currents are strongest. At polar latitudes, where ionospheric current systems are more complex, daily variations can reach 100 nanoTesla or more.\nThese regular variations follow predictable patterns that repeat daily and show seasonal modulations. For animals using magnetic cues for navigation, these predictable variations might either be filtered out by their sensory systems or potentially used as additional timing information.\nGeomagnetic Storm Disturbances: During periods of enhanced solar activity, Earth’s magnetic field can experience big disturbances that far exceed normal quiet-time variations. Geomagnetic storms occur when disturbances in the solar wind create enhanced coupling between the solar wind’s magnetic field and Earth’s magnetosphere. These events drive intense electrical currents in the magnetosphere and ionosphere, creating magnetic field variations that can exceed 1000 nanoTesla in polar regions and 250 nanoTesla at mid-latitudes²³.\nThe temporal characteristics of geomagnetic storms are particularly relevant for animal navigation. Storm-related magnetic field changes can occur within seconds to days, creating rapid alterations in the magnetic environment that animals experience. The magnitude of these changes often exceeds the established sensitivity thresholds of animal magnetoreceptors by factors of ten or more, suggesting that geomagnetic storms could significantly disrupt magnetic navigation systems.\nSecular Variation: On longer time scales, Earth’s magnetic field undergoes continuous slow changes known as secular variation, driven by evolving circulation patterns within the liquid outer core. These changes typically amount to tens of nanoTesla per year at any given location, representing a gradual evolution of the magnetic field over time scales of years to decades.\nFor long-lived migratory animals or populations with strong site fidelity, secular variation could potentially require periodic recalibration of magnetic navigation systems. However, the slow rate of secular variation means that it is unlikely to affect navigation during individual migratory journeys, which typically last weeks to months.",
    "crumbs": [
      "Home",
      "The science behind",
      "Key Concepts"
    ]
  },
  {
    "objectID": "background.html#geomagnetic-storms-and-solar-wind",
    "href": "background.html#geomagnetic-storms-and-solar-wind",
    "title": "Key Concepts",
    "section": "5. Geomagnetic Storms and Solar Wind",
    "text": "5. Geomagnetic Storms and Solar Wind\n\nStorm-Related Disruption\nThe sensitivity thresholds established by neurophysiological and behavioral research have profound implications when compared to the magnitude of magnetic field variations that occur during geomagnetic storms. Solar wind disturbances can create magnetic field changes exceeding 1000 nanoTesla within minutes during major geomagnetic storms²⁶, representing variations that are 5-65 times larger than established animal sensitivity thresholds.\nPotential Disruption Mechanisms: Animals using magnetic intensity as a positional cue could experience significant navigation errors during geomagnetic storms. If birds or other animals rely on specific intensity values as location markers, sudden storm-related intensity changes could create the illusion that they have been displaced to entirely different geographic locations. This effect would be similar to the responses observed in virtual magnetic displacement experiments¹⁵⁻¹⁶⁻¹⁷⁻²⁷, where animals exposed to artificial magnetic fields characteristic of distant locations attempt to compensate by changing their flight direction.\nAnimals using magnetic inclination or declination for compass orientation might experience disruption of their directional sensing capabilities during storms. Rapid changes in field direction could cause temporary loss of magnetic compass function, potentially forcing animals to rely on alternative compass systems such as solar or stellar compasses⁴.\nSpecies-Specific Responses: Different animal species likely respond to geomagnetic disturbances in various ways, depending on their particular methods of using magnetic information for navigation³. Some species might temporarily cease migration during severe magnetic disturbances, while others might switch to alternative navigation systems. The behavioral responses probably depend on the availability of backup navigation cues and the flexibility of each species’ navigation system.",
    "crumbs": [
      "Home",
      "The science behind",
      "Key Concepts"
    ]
  },
  {
    "objectID": "background.html#geomagnetic-data-sources",
    "href": "background.html#geomagnetic-data-sources",
    "title": "Key Concepts",
    "section": "6. Geomagnetic Data Sources",
    "text": "6. Geomagnetic Data Sources\n\nTerrestrial Observatory Networks\nThe systematic measurement of Earth’s magnetic field began in the 1830s and has evolved into a sophisticated global network of ground-based observatories that provide continuous, high-precision magnetic field measurements.\nINTERMAGNET Network: The International Real-time Magnetic Observatory Network (INTERMAGNET) represents the primary source of ground-based geomagnetic data, currently comprising 152 observatories distributed across the globe³⁷. These observatories employ standardized instrumentation and data collection procedures to ensure consistency and comparability of measurements worldwide.\nEach INTERMAGNET observatory typically operates multiple magnetometers, including absolute instruments that measure the true magnetic field vector and variometers that detect changes in the field with high temporal resolution. The observatories record magnetic field measurements continuously, typically at one-second or one-minute intervals, creating detailed time series that capture both gradual changes and rapid fluctuations.\nAdvantages of Terrestrial Measurements: Ground-based observatories offer several significant advantages for magnetic field research. Their calibration accuracy is exceptionally high, with measurement uncertainties typically less than 1 nanoTesla for carefully maintained instruments. The continuous operation of these stations creates long-term data records, some extending back more than a century, that are invaluable for studying secular variation and long-term magnetic field changes.\nThe temporal resolution of ground-based measurements is also superior to satellite data, with one-second sampling rates that can capture rapid magnetic field fluctuations associated with geomagnetic storms and other space weather events. This high temporal resolution makes ground-based data particularly valuable for studying the detailed time evolution of magnetic disturbances.\nLimitations of Ground-Based Networks: Despite their high accuracy and temporal resolution, terrestrial magnetic observatories have significant limitations for global magnetic field studies. The spatial coverage is highly irregular, with dense networks in some regions (particularly northern and western Europe) but sparse or absent coverage in others. Oceanic regions are particularly poorly covered, with very few magnetic observatories on islands and none on the open ocean.\nThe effective spatial coverage of each observatory is limited to approximately 1000 kilometers, beyond which local magnetic variations can differ significantly from those measured at the observatory. This limitation means that only regions with dense observatory networks provide complete spatial coverage, excluding most animal migration pathways that cross oceanic or remote continental regions.\nTemporal data availability also presents challenges for real-time applications. Observatories submit their data to the central INTERMAGNET network at different times, often with delays of months to years for the highest quality, fully processed data. Some observatories occasionally cease operation due to funding or technical issues, creating gaps in temporal coverage.\n\n\nSatellite-Based Measurements\nSatellite missions have revolutionized geomagnetic field research by providing consistent global coverage with standardized instrumentation. Over the past 60 years, a series of dedicated magnetic field missions has complemented terrestrial measurements and enabled global-scale studies of magnetic field structure and dynamics.\nHistorical Satellite Missions: The evolution of satellite-based geomagnetism began with early missions such as POGO (1965-1971), which provided the first global magnetic field measurements from space. Subsequent missions including Magsat (1979-80), Ørsted (1999-present), CHAMP (2000-2010), and SAC-C (2000-present) progressively improved measurement accuracy and global coverage³⁸.\nEach mission contributed unique capabilities and extended the temporal baseline of satellite magnetic measurements. Magsat provided the first high-precision global magnetic field model, while Ørsted began the era of continuous, long-term satellite magnetic monitoring. CHAMP delivered exceptionally precise measurements that advanced understanding of both the main field and its temporal variations.\nThe Swarm Mission: The European Space Agency’s Swarm mission, launched in 2013, represents the current state-of-the-art in satellite-based magnetic field measurement³⁹. The mission employs three identical satellites arranged in a carefully designed constellation that provides enhanced spatial and temporal sampling of the global magnetic field.\nThe constellation consists of satellites Alpha and Charlie, which orbit in parallel at an altitude of 480 kilometers with a separation of approximately 150 kilometers at the equator. Satellite Bravo orbits at a higher altitude of 510 kilometers in a different orbital plane that, at present, is nearly perpendicular to the Alpha-Charlie pair. This configuration provides measurements at two different altitudes and enables separation of different magnetic field sources.\nSwarm Instrumentation: Each Swarm satellite carries identical scientific instrumentation designed for precise magnetic field measurement. The primary instruments include an Absolute Scalar Magnetometer (ASM) that measures the total magnetic field intensity, a Vector Field Magnetometer (VFM) that measures the three-component magnetic field vector, and a GPS receiver for precise orbit determination.\nThe VFM provides magnetic field measurements at 1 Hz resolution in the North-East-Centre coordinate system, calibrated using measurements from the ASM and stellar cameras that determine satellite orientation. This combination of instruments enables precise determination of both the magnitude and direction of the magnetic field vector at satellite altitude.\nAdvantages of Satellite Measurements: Satellite measurements resolve many of the limitations of ground-based networks by providing consistent global coverage with standardized instrumentation. The polar-orbiting design of most magnetic field satellites ensures complete global coverage within a few days, including oceanic and remote continental regions that lack ground-based observatories.\nSatellite data are typically available within days to weeks of collection, much faster than the fully processed data from many ground-based observatories. The standardized instrumentation and data processing procedures also ensure consistency in measurements across different geographic regions and time periods.\nThe orbital perspective of satellites enables measurement of the magnetic field above most ionospheric current systems, providing information about magnetic field sources that cannot be obtained from ground-based measurements alone. This capability is particularly valuable for studying external field variations and their global patterns.\nSatellite Data Access and Formats: Swarm data are made freely available through the European Space Agency’s Earth Observation Policy, with data access provided through the VirES (Virtual workspace for Earth observation Scientists) web platform⁴⁸. The Level 1b data products provide corrected and calibrated magnetic field measurements in standard scientific formats.\nHowever, satellite magnetic data are provided in specialized formats such as the Common Data Format (CDF) developed by NASA⁴³, which are not readily accessible using standard ecological data analysis software. This technical barrier has historically limited the use of satellite magnetic data outside the specialized geophysics community, despite the open data policies of space agencies.\n\n\nGeomagnetic Indices and Activity Monitoring\nUnderstanding and quantifying the level of geomagnetic activity is crucial for both space weather applications and studies of magnetic field effects on biological systems. Geomagnetic indices provide standardized measures of magnetic field disturbance that enable comparison of activity levels across different times and locations.\nK-Index System: The K-index represents the fundamental unit for measuring local geomagnetic disturbance. Calculated every three hours at individual magnetic observatories, the K-index quantifies disturbances in the horizontal component of the magnetic field on a quasi-logarithmic scale from 0 to 9²⁶. A K-index of 0 indicates perfectly calm magnetic conditions, while values of 5 or higher indicate geomagnetic storm conditions.\nThe K-index calculation involves comparing the observed magnetic field variations during each three-hour period to the expected quiet-day variation for that location and season. This approach accounts for the regular daily variations in the magnetic field and highlights unusual disturbances that exceed normal quiet-time levels.\nKp Index: The planetary Kp index provides a global measure of geomagnetic activity by averaging K-indices from a standardized network of magnetic observatories distributed worldwide³⁵. Calculated every three hours, the Kp index ranges from 0 to 9 and serves as a proxy for the energy input from the solar wind into Earth’s magnetosphere.\nThe Kp index is widely used in space weather applications and research studies because it provides a single number that characterizes global magnetic activity levels. Kp values of 5 or higher indicate geomagnetic storm conditions, with values above 7 representing severe storms that can have significant technological and potentially biological impacts.",
    "crumbs": [
      "Home",
      "The science behind",
      "Key Concepts"
    ]
  },
  {
    "objectID": "background.html#references",
    "href": "background.html#references",
    "title": "Key Concepts",
    "section": "References",
    "text": "References\n\nDeutschlander ME, Beason RC. Avian navigation and geographic positioning. J Field Ornithol. 2014;85(2):111–33.\nHolland RA. True navigation in birds: from quantum physics to global migration. J Zool. 2014;293:1–15.\nMouritsen H. Long-distance navigation and magnetoreception in migratory animals. Nature. 2018;558:50–9.\nChernetsov N. Compass systems. J Comp Physiol A. 2017;203:447–53.\nGagliardo A. Forty years of olfactory navigation in birds. J Exp Biol. 2013;216:2165–71.\nBonadonna F, Gagliardo A. Not only pigeons: avian olfactory navigation studied by satellite telemetry. Ethol Ecol Evol. 2021.\nWiltschko R, Wiltschko W. Avian navigation: a combination of innate and learned mechanisms. Adv Study Behav. 2015;47:229–310.\nLohmann KJ, Lohmann CMF, Putman NF. Magnetic maps in animals: nature’s GPS. J Exp Biol. 2007;210:3697–705.\nNaisbett-Jones LC, Putman NF, Stephenson JF, Ladak S, Young KA. A magnetic map leads juvenile European eels to the Gulf Stream. Curr Biol. 2017;27:1236–40.\nBrothers JR, Lohmann KJ. Evidence that magnetic navigation and geomagnetic imprinting shape spatial genetic variation in sea turtles. Curr Biol. 2018;28:1325–9.\nBurda H, Begall S, Hart V, Malkemper EP, Painter MS, Phillips JB. Magnetoreception in mammals. In: Fritzsch B, editor. The senses: a comprehensive reference (second edition): Elsevier; 2020. p. 421–44.\nGenzel D, Yovel Y, Yartsev MM. Neuroethology of bat navigation. Curr Biol. 2018;28(17):R997–R1004.\nGranger J, Walkowicz L, Fitak R, Johnsen S. Gray whales strand more often on days with increased levels of atmospheric radio-frequency noise. Curr Biol. 2020;30(4):R155–6.\nVanselow H, Jacobsen S, Hall C, Garthe S. Solar storms may trigger sperm whale strandings: explanation approaches for multiple strandings in the North Sea in 2016. Int J Astrobiol. 2017;17(4):336–44.\nKishkinev D, Chernetsov N, Pakhomov A, Heyers D, Mouritsen H. Eurasian reed warblers compensate for virtual magnetic displacement. Curr Biol. 2015;25(19):822–4.\nKishkinev D, Packmor F, Zeichmeister T, Winkler H-C, Chernetsov N, Mourisen H, et al. Navigation by extrapolation of geomagnetic cues in a migratory songbird. Curr Biol. 2021;31(7):1563–9.\nPakhomov A, Anashina A, Heyers D, Kobylkov D, Mourtisen D, Chernetsov N. Magnetic map navigation in a migratory songbird requires trigeminal input. Nat Sci Rep. 2018;8:11975.\nWikelski M, Arriero E, Gagliardo A, Holland RA, Huttunen MJ, Juvaste R, et al. True navigation in migrating gulls requires intact olfactory nerves. Nat Sci Rep. 2015;5:17061.\nBowlin MS, Bisson I-A, Shamoun-Baranes J, Reichard JD, Sapir N, Marra PP, et al. Grand challenges in migration biology. Integr Comp Biol. 2010;50(3\n\n\n\n\n\nDemšar, Urška, Beate Zein, and Jed A. Long. 2025. “A New Data-Driven Paradigm for the Study of Avian Migratory Navigation.” Movement Ecology 13 (1). https://doi.org/10.1186/s40462-025-00543-8.",
    "crumbs": [
      "Home",
      "The science behind",
      "Key Concepts"
    ]
  },
  {
    "objectID": "calculation_mag_components.html",
    "href": "calculation_mag_components.html",
    "title": "Calculation of Magnetic Components",
    "section": "",
    "text": "Swarm data provide information on the earth’s magnetic field at the orbit level, which is above the ionosphere, where geomagnetic field is affected by the electrical currents induced by the interaction of the solar wind and magnetosphere ( see the figure above to understand the vertical contributions of the earth’ magnetic field). This means that to obtain the values of the magnetic field on the Earth’s surface where animals are migrating, the raw measurements from Swarm need to be corrected removing the effects from the modeled values from core, crust and magnetosphere.\nWe do this in three steps:\n1. We download the swarm residuals for the GPS date, getting essentially the unmodelled ionospheric field contribution that we haven’t captured in any of the other models.\n2. Because at the ground level the core and crust contributions are strongen than the ones at the satellite altitude, We use the CHAOS model to compute the core, crust and magnetosphere contributions for the particular, latitude, longitude, datetime and altitude of each GPS point.\n3. Finally we add those values modeled by CHAOS values with the Swarm residuals, computing a comprehensive magnetic values than include the stronger core and crust contributions and the unmodellled values from the satellite altitude that capture all the inoshpere field contributions. For details of this correction see Supplementary Information 1 in our main paper.\n\n\n\n\n\n\n\nImportant\n\n\n\nCHAOS: It is a comprehensive field model, containing the modeled contributions of the time-varying core, the static crustal field, the average time-varying magnetosphere. We show calculation of the residuals (adding this parameter residuals=True) which means: data - CHAOS(Core+Static+Magnetosphere)\n\n\nThe CHAOS model is available on the server as model variables:\n\nCHAOS-Core: SH degree 1-20\nCHAOS-Static: SH degree 21-110\nCHAOS-MMA-Primary: Magnetosphere external field, SH degree 1-2\nCHAOS-MMA-Secondary: Magnetosphere internal induced field, SH degree 1-2",
    "crumbs": [
      "Home",
      "The science behind",
      "Calculation of Magnetic Components"
    ]
  },
  {
    "objectID": "how_does_it_works.html",
    "href": "how_does_it_works.html",
    "title": "How MagGeo Works",
    "section": "",
    "text": "Interpolation (ST-IDW) and Annotation Process\nMagGeo is a tool that contains a set of python functions to carry out a data manipulation and mathematical processes to transform the data from Swarm Constellation,include the modelled values from CHAOS model ( last version in December 2019) and annotate the interpolated values into every GPS point in a given GPS trajectory.\nThe following process is a set of three steps, 1. Get the Swarm data, particularly the magnetic residuals in the NEC components. 2. Run the Spatio-temporal kernel where the script will filter the Swarm data based on our spatial-temporal cylinder, to interpolate the magnetic components in the NEC frame for the given GPS track. Finally using the enriched GPS track, the final step will be the 3. Calculation of Magnetic Components which use the CHAOS model to compute the magnetic components at the ground level. With the interpolated magnetic values corrected by the ionospheric contribution. The script will compute the other magnetic components including F (magnetic intensity), H (Horizontal component), Declination and Inclination. For detailed information of this process go to the Main Notebook.\nOnce we have requested the data we need for each point in the GPS Track and considering we have gathered the available data from the three satellites for one day ( 24 hours, every 60 seconds around 1440 Swarm measures per satellite). Now we need to filter in space and time the available points to compute the magnetic values for each GPS point in its particular date and time. Therefore, before running the interpolation process we set four functions that will require the latitude and longitude and the epoch time of each GPS point to filter the Swarm points into what we called Space-Time Cylinder. The following picture can provide a better explanation about how the points inside the space-time cylinder are included or excluded. Figure I, shows how the R of the Space-Time cylinder is based on the GPS point latitude. Figure II, illustrate the geometric components behind the space-time cylinder where the points are filtered and included in the interpolation process. Figure B, will help you to understand how the following functions compute the required parameters Figure III shows the idea behind the interpolation process for each GPS point, requesting and processing the available Swarm measures by the three satellites. For more information about the time-space windows please read the full paper where we explain the details of it.\nTherefore, before running the interpolation process we set four functions that will require the latitude and longitude and the epoch time of each GPS point to filter the Swarm points into what we called Space-Time Cylinder. The following picture can provide a better explanation about how the points inside the space-time cylinder are included or excluded. Figure I, shows how the R of the Space-Time cylinder is based on the GPS point latitude. Figure II, illustrate the geometric components behind the space-time cylinder where the points are filtered and included in the interpolation process. Figure B, will help you to understand how the following functions compute the required parameters Figure III shows the idea behind the interpolation process for each GPS point, requesting and processing the available Swarm measures by the three satellites. For more information about the time-space windows please read the full paper where we explain the details of it.",
    "crumbs": [
      "Home",
      "The science behind",
      "How MagGeo Works"
    ]
  },
  {
    "objectID": "how_does_it_works.html#interpolation-st-idw-and-annotation-process",
    "href": "how_does_it_works.html#interpolation-st-idw-and-annotation-process",
    "title": "How MagGeo Works",
    "section": "",
    "text": "📘 SwarmMagAnnotation function:\nWorking as the main function for the annotation process, this functions meets the previous functions running the space-time window filters, and the computing the ST- IDW process. This function will run a interpolation process for each GPS Point considering only the Swarm points inside the Space-Time cylinder computed by the four previous functions. The return value will be an array with the values the annotated magnetic values for the GPS point. The function will be executed inside a loop going through the GPS track. This function is the annotation process per se, and through this process at first we run the interpolation getting the magnetic values in NEC reference frame and then we compute the extra magnetic values that are useful to get a better understating of the earth’s magnetic field at this particular location, date and time.\n\n\n\n\n\n\n\n\nNote\n\n\n\n📘 Auxiliary Functions:The function ST_IDW_Process includes 4 auxiliary functions to run the spatial-temporal kernel\n\n\ndistance_to_GPS function: Is the function in charge to calculate the distance between each GPS Point and the Swarm Point.\n\n\nKradius function: Is the function in charge to compute the R (radius) value in the cylinder. The R value will be considered based on the latitude of each GPS Point.\n\n\nDistJ function: This function will calculate the d value as the hypotenuse created in the triangle created amount the locations of the GPS point, the location of the Swarm points and the radius value.\n\n\nDfTime_func function: This is a time function to selected the points in the range of a the DeltaTime - DT window. The Delta time window has been set as 4 hours for each satellite trajectory.",
    "crumbs": [
      "Home",
      "The science behind",
      "How MagGeo Works"
    ]
  },
  {
    "objectID": "SequentialMode.html",
    "href": "SequentialMode.html",
    "title": "1  MagGeo - Sequential Mode",
    "section": "",
    "text": "1.1 Overview\nAuthors | Fernando Benitez-Paez, Urška Demšar, Jed Long, Ciaran Beggan\nContact | Fernando.Benitez@st-andrews.ac.uk, ud2@st-andrews.ac.uk, jed.long@uwo.ca, ciar@bgs.ac.uk\nKeywords | Bird migration, data fusion, Earth’s magnetic field, Swarm, GPS tracking\nThis Jupyter Notebook will guide you through the required steps to annotate your GPS tracking data with the earth’s magnetic field data from Swarm (European Space Agency). This version is called Sequential Mode, alternatively you can use Parallel Mode to take advantage of parallelized computing if required. More information about the Swarm satellites can be found in the Main Document on the MagGeo github repository. This script will use a sequential loop to run the annotation process for each GPS Point (row) from your data.\nTo execute the code, you can go through each cell (pressing Crtl+Enter), you will also find inner comments ## to describe each particular step. If you are not familiar with using Jupyter Notebooks, you might want to take some time to learn how first, for example take a look at the notebook-basics.ipynb Notebook inside MagGeo.",
    "crumbs": [
      "Home",
      "Notebooks",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>MagGeo - Sequential Mode</span>"
    ]
  },
  {
    "objectID": "SequentialMode.html#data-requirements",
    "href": "SequentialMode.html#data-requirements",
    "title": "1  MagGeo - Sequential Mode",
    "section": "1.2 Data requirements",
    "text": "1.2 Data requirements\n\n🔎 Your trajectory must be in a csv format::\nThere are three columns that must be included in your GPS trajectory. Make sure your GPS trajectory includes Latitude , Longitude and timestamp. We suggest that the Timestamp column follow the day/month/year Hour:Minute (dd/mm/yyyy HH:MM:SS) format, Latitude and Longitude should be in decimal degrees (WGS84). Optionally an altitude column can be used providing altitude (the altitude must be in km). Other Columns will be ignored. Here it is an example of how your GPS track should look:\n\nFor this example we are reading the BirdGPSTrajectory.csv: file. If you want to run the method using your own csv file, make sure you store your the file in the ./data folder. For more information about the dataset we used in this example go to the Main Notebook.",
    "crumbs": [
      "Home",
      "Notebooks",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>MagGeo - Sequential Mode</span>"
    ]
  },
  {
    "objectID": "SequentialMode.html#import-the-required-python-libraries",
    "href": "SequentialMode.html#import-the-required-python-libraries",
    "title": "1  MagGeo - Sequential Mode",
    "section": "1.3 Import the required python libraries",
    "text": "1.3 Import the required python libraries\n\nimport datetime as dt\nfrom datetime import timedelta\nimport sys, os\nimport pandas as pd\nimport numpy as np\nfrom tqdm import tqdm\nimport matplotlib.pyplot as plt\nfrom viresclient import set_token\nsys.path.append(\"..\")\n\nimport utilities\nfrom utilities.MagGeoFunctions import getGPSData\nfrom utilities.MagGeoFunctions import Get_Swarm_residuals\nfrom utilities.MagGeoFunctions import ST_IDW_Process\nfrom utilities.MagGeoFunctions import CHAOS_ground_values",
    "crumbs": [
      "Home",
      "Notebooks",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>MagGeo - Sequential Mode</span>"
    ]
  },
  {
    "objectID": "SequentialMode.html#add-your-vires-web-client-token",
    "href": "SequentialMode.html#add-your-vires-web-client-token",
    "title": "1  MagGeo - Sequential Mode",
    "section": "1.4 Add your VirES web client Token",
    "text": "1.4 Add your VirES web client Token\nThe VirES client API, requires a token. Before start you need to get your own VirES token. You can visit https://vires.services/ to get yours, and then add it into the next cell.\n\nset_token(\"https://vires.services/ows\", set_default=True)",
    "crumbs": [
      "Home",
      "Notebooks",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>MagGeo - Sequential Mode</span>"
    ]
  },
  {
    "objectID": "SequentialMode.html#read-the-gps-track",
    "href": "SequentialMode.html#read-the-gps-track",
    "title": "1  MagGeo - Sequential Mode",
    "section": "1.5 Read the GPS track",
    "text": "1.5 Read the GPS track\nThe following steps will load the GPS track from a csv file, and set some requirements before downloading geomagnetic data from Swarm. If your csv track file doesnt not have any altitude attribute, MagGeo will use sea level as your altitude (i.e., 0 Km). Altitude column units must be Km\n\nbase_dir=os.path.dirname(os.getcwd())\ntemp_results_dir = os.path.join(base_dir, \"temp_data\")\nresults_dir = os.path.join(base_dir, \"results\")\ndata_dir = os.path.join(base_dir, \"data\")\nutilities_dir = os.path.join(base_dir, \"utilities\")\n\n\n# Make sure the csv file of your trackectory is stored in the Data folder.\n# Enter the name of your GPS track csv file including the extension .csv  and press Enter (e.g. BirdGPSTrajectory.csv)\n# Make sure you have a columnn that integrates date and time, before include in MagGeo.\n# If your csv track file does not have any altitude attribute, MagGeo will use sea level as your altitude (i.e. 0 Km).\n# i.e height (Only in KM)\ngpsfilename= \"BirdGPSTrajectoryTest.csv\"\nLat=\"location-lat\"\nLong=\"location-long\"\nDateTime=\"timestamp\"\naltitude = \"height\"\n\n\n# Here MagGeo is reading your CSV file, taking the Lat, Long, Date&Time and Altitutes attributes and compute, some aditional attrubutes we need to the annotation process.\n# Setting the date and time attributes for the required format and computing the epoch column. Values like Maximum and Minimun Date and time are also calculated.\nGPSData = getGPSData(data_dir,gpsfilename,Lat,Long,DateTime,altitude)\nGPSData",
    "crumbs": [
      "Home",
      "Notebooks",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>MagGeo - Sequential Mode</span>"
    ]
  },
  {
    "objectID": "SequentialMode.html#validate-the-correct-amount-of-swarm-measures",
    "href": "SequentialMode.html#validate-the-correct-amount-of-swarm-measures",
    "title": "1  MagGeo - Sequential Mode",
    "section": "1.6 Validate the correct amount of Swarm measures",
    "text": "1.6 Validate the correct amount of Swarm measures\nThe following loop is identifiying the time and validating if the time is less than 4:00 hours and more than 20:00 hours to bring one extra day of data. The result of this validation is written in an empty python list which will be later validated to get the unique dates. This avoids duplicate downloading of data for the same day and reduces overall computational time.\n\ndatestimeslist = []\nfor index, row in GPSData.iterrows():\n    datetimerow  = row['gpsDateTime']\n    daterow = row['dates']\n    hourrow = row['times']\n    hourrow = hourrow.strftime('%H:%M:%S')\n    if hourrow &lt; '04:00:00':\n    date_bfr = daterow - (timedelta(days=1))\n    datestimeslist.append(daterow)\n    datestimeslist.append(date_bfr)\n    if hourrow &gt; '20:00:00':\n    Date_aft = daterow + (timedelta(days=1))\n    datestimeslist.append(daterow)\n    datestimeslist.append(Date_aft)  \n    else:\n    datestimeslist.append(daterow)\n\nGetting a list of unique dates to download the Swarm Data\n\ndef uniquelistdates(list): \n    x = np.array(list) \n    uniquelist = np.unique(x)\n    return uniquelist\n\nuniquelist_dates = uniquelistdates(datestimeslist)\nuniquelist_dates",
    "crumbs": [
      "Home",
      "Notebooks",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>MagGeo - Sequential Mode</span>"
    ]
  },
  {
    "objectID": "SequentialMode.html#download-swarm-residuals-data",
    "href": "SequentialMode.html#download-swarm-residuals-data",
    "title": "1  MagGeo - Sequential Mode",
    "section": "1.7 Download Swarm residuals data",
    "text": "1.7 Download Swarm residuals data\nOnce the date and time columns have been defined and the unique dates are identified the script can start the download process. Usually the data from Swarm is requested using only one satellite, however MagGeo will use the magnetic measures from the three satellite of the Swarm Mission (Alpha, Bravo, Charlie). Be aware satellite Charlie, got its AMS broken earlier in the mission, although the initial dates still have valid data MagGeo can use.\n\n📘 Be aware:: Due to the amount of dates in the demo GPS track (42 days), the time to process the sample data will take approximately 10 minutes. Unfortunatly the download process migth be a slow process, particually for the magnetic models data MagGeo requieres.\n\nSet a connection to the VirES client and using the function Get_Swarm_residuals we will get the swarm residuals for the dates included in the previous list.\n\n%%time\n\nhours_t_day = 24 #MagGeo needs the entire Swarm data for each day of the identified day.\nhours_added = dt.timedelta(hours = hours_t_day)\n\nlistdfa = []\nlistdfb = []\nlistdfc = []\n\nfor d in tqdm(uniquelist_dates, desc=\"Getting Swarm Data\"):\n    #print(\"Getting Swarm data for date:\",d )\n    startdate = dt.datetime.combine(d, dt.datetime.min.time())\n    enddate = startdate + hours_added\n    SwarmResidualsA,SwarmResidualsB,SwarmResidualsC = Get_Swarm_residuals(startdate, enddate)\n    listdfa.append(SwarmResidualsA)\n    listdfb.append(SwarmResidualsB)\n    listdfc.append(SwarmResidualsC)\n\nConcat the previous results and temporally save the requested data locally: Integrate the previous list for all dates, into pandas dataframes. We will temporally saved the previous results, in case you need to re-run MagGeo, with the following csv files you will not need to run the download process.\n\n%%time\n\nPdSwarmRes_A = pd.concat(listdfa, join='outer', axis=0)\nPdSwarmRes_A.to_csv (os.path.join(temp_results_dir,'TotalSwarmRes_A.csv'), header=True)\nPdSwarmRes_B = pd.concat(listdfb, join='outer', axis=0)\nPdSwarmRes_B.to_csv (os.path.join(temp_results_dir,'TotalSwarmRes_B.csv'), header=True)\nPdSwarmRes_C = pd.concat(listdfc, join='outer', axis=0)\nPdSwarmRes_C.to_csv (os.path.join(temp_results_dir,'TotalSwarmRes_C.csv'), header=True)\n\nTotalSwarmRes_A = pd.read_csv(os.path.join(temp_results_dir,\"TotalSwarmRes_A.csv\"),low_memory=False, index_col='epoch')\nTotalSwarmRes_A['timestamp'] = pd.to_datetime(TotalSwarmRes_A['timestamp'])\nTotalSwarmRes_B = pd.read_csv(os.path.join(temp_results_dir,\"TotalSwarmRes_B.csv\"),low_memory=False, index_col='epoch')\nTotalSwarmRes_B['timestamp'] = pd.to_datetime(TotalSwarmRes_B['timestamp'])\nTotalSwarmRes_C = pd.read_csv(os.path.join(temp_results_dir,\"TotalSwarmRes_C.csv\"),low_memory=False, index_col='epoch')\nTotalSwarmRes_C['timestamp'] = pd.to_datetime(TotalSwarmRes_C['timestamp'])\n\nTotalSwarmRes_A.head(10) #If you need to take a look of the Swarm Data, you can print TotalSwarmRes_B, or TotalSwarmRes_C",
    "crumbs": [
      "Home",
      "Notebooks",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>MagGeo - Sequential Mode</span>"
    ]
  },
  {
    "objectID": "SequentialMode.html#spatio-temporal-filter-and-interpolation-process-st-idw",
    "href": "SequentialMode.html#spatio-temporal-filter-and-interpolation-process-st-idw",
    "title": "1  MagGeo - Sequential Mode",
    "section": "1.8 Spatio-Temporal filter and interpolation process (ST-IDW)",
    "text": "1.8 Spatio-Temporal filter and interpolation process (ST-IDW)\nOnce we have requested the swarm data, now we need to filter in space and time the available points to compute the magnetic values (NEC frame) for each GPS point based on its particular date and time. The function ST_IDW_Process takes the GPS track and the downloaded data from swarm to filter in space and time based on the criteria defined in our method. With the swarm data filtered we interpolate (IDW) the NEC components for each GPS data point.\n\n%%time\n#Sequential mode, applying a traditional loop using iterrows.\nif __name__ == '__main__':\n    dn = [] ## List used to add all the GPS points with the annotated MAG Data. See the last bullet point of this process    \n    for index, row in tqdm(GPSData.iterrows(), total=GPSData.shape[0], desc=\"Annotating the GPS Trayectory\"):\n    GPSLat = row['gpsLat']\n    GPSLong = row['gpsLong']\n    GPSDateTime = row['gpsDateTime']\n    GPSTime = row['epoch']\n    GPSAltitude = row['gpsAltitude']\n    #print(\"Process for:\", index,\"DateTime:\",GPSDateTime)\n    try:\n    result=ST_IDW_Process(GPSLat,GPSLong,GPSAltitude, GPSDateTime,GPSTime, TotalSwarmRes_A, TotalSwarmRes_B, TotalSwarmRes_C)\n    dn.append(result)\n    except:\n    #print(\"Ups!.That was a bad Swarm Point, let's keep working with the next point\")\n    result_badPoint= {'Latitude': GPSLat, 'Longitude': GPSLong, 'Altitude':GPSAltitude, 'DateTime': GPSDateTime, 'N_res': np.nan, 'E_res': np.nan, 'C_res':np.nan, 'TotalPoints':0, 'Minimum_Distance':np.nan, 'Average_Distance':np.nan}  \n    dn.append(result_badPoint)\n    continue\n\nTemporally save the ST-IDW result locally. Still MagGeo needs to run the calculation of geomagnetic components, brining the magnetic values at the altitude provided for your GPS track.\n\nGPS_ResInt = pd.DataFrame(dn)\nGPS_ResInt.to_csv (os.path.join(temp_results_dir,\"GPS_ResInt.csv\"), header=True)\nGPS_ResInt",
    "crumbs": [
      "Home",
      "Notebooks",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>MagGeo - Sequential Mode</span>"
    ]
  },
  {
    "objectID": "SequentialMode.html#compute-the-magnetic-components-at-the-trajectory-altitute-using-chaos-model",
    "href": "SequentialMode.html#compute-the-magnetic-components-at-the-trajectory-altitute-using-chaos-model",
    "title": "1  MagGeo - Sequential Mode",
    "section": "1.9 Compute the magnetic components at the trajectory altitute using CHAOS model",
    "text": "1.9 Compute the magnetic components at the trajectory altitute using CHAOS model\nThe function CHAOS_ground_values is used to run the calculation of magnetic components. This adjustment requeries the magnetic components at the trajectory altitude (or at the ground level) using CHAOS (theta, phi, radial). This process also further conducts the rotation and transformation between a geocentric earth-based reference system (CHAOS) and geodetic earth-based reference system (GPS track). Once the corrected values are calculated the non-necesary columns are removed. For more information about this process go to the Main Notebook.\n\n%%time\nX_obs, Y_obs, Z_obs, X_obs_internal, Y_obs_internal, Z_obs_internal =CHAOS_ground_values(utilities_dir,GPS_ResInt)\nGPS_ResInt['N'] =pd.Series(X_obs)\nGPS_ResInt['E'] =pd.Series(Y_obs)\nGPS_ResInt['C'] =pd.Series(Z_obs)\nGPS_ResInt['N_Obs'] =pd.Series(X_obs_internal)\nGPS_ResInt['E_Obs'] =pd.Series(Y_obs_internal)\nGPS_ResInt['C_Obs'] =pd.Series(Z_obs_internal)\n\nGPS_ResInt.drop(columns=['N_res', 'E_res','C_res'], inplace=True)\nGPS_ResInt",
    "crumbs": [
      "Home",
      "Notebooks",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>MagGeo - Sequential Mode</span>"
    ]
  },
  {
    "objectID": "SequentialMode.html#the-final-result",
    "href": "SequentialMode.html#the-final-result",
    "title": "1  MagGeo - Sequential Mode",
    "section": "1.10 The final result",
    "text": "1.10 The final result\nWith the NEC components for each GPS Track point, it is possible to compute the aditional magnetic components. For more information about the magnetic components and their relevance go to the main paper or notebook.\n\n\n\n\n\n\nTip\n\n\n\n📘 The annotated dataframe will include the following attributes: If you need more information about how the geomagnetic components are described go to the main MagGeo Notebook:\n\nLatitude: from the GPS Track\nLongitude: from the GPS Track\nTimestamp: from the GPS Track.\nMagnetic Field Intensity: mapped as Fgps in nanoTeslas (nT).\nN (Northwards) component: mapped as N in nanoTeslas (nT).\nE (Eastwards) component: mapped as E. in nanoteslas (nT).\nC (Downwards or Center): component mapped as C in nanoTeslas (nT).\nHorizontal component: mapped as H in nanoTeslas (nT).\nMagnetic Inclination : mapped as I in degrees.\nMagnetic Declination or dip angle: mapped as D in degrees.\nKp Index: mapped as kp.\nTotal Points: as the amount of Swarm points included in the ST-IDW process from the three satellites.\nMinimum Distance: mapped as MinDist, representing the minimum distance from a Swarm points and each GPS point location.\nAverage Distance: mapped as AvDist, representing the average distance between the Swarm points and the GPS point location.\n\n\n\n\n%%time\n# Having Intepolated and weighted the magnetic values, we can compute the other magnectic components. \nGPS_ResInt['H'] = np.sqrt((GPS_ResInt['N']**2)+(GPS_ResInt['E']**2))\n#check the arcgtan in python., From arctan2 is saver.\nDgpsRad = np.arctan2(GPS_ResInt['E'],GPS_ResInt['N'])\nGPS_ResInt['D'] = np.degrees(DgpsRad)\nIgpsRad = np.arctan2(GPS_ResInt['C'],GPS_ResInt['H'])\nGPS_ResInt['I'] = np.degrees(IgpsRad)\nGPS_ResInt['F'] = np.sqrt((GPS_ResInt['N']**2)+(GPS_ResInt['E']**2)+(GPS_ResInt['C']**2))\nGPS_ResInt\n\nThe previous dataframe (GPS_ResInt), MagGeo has computed the geomagnetic components for each locations and time of your CSV trajectory. Now we will finish up combining the original atributes from your CSV with the annotated results from MagGeo.\n\n%%time\noriginalGPSTrack=pd.read_csv(os.path.join(data_dir,gpsfilename))\nMagGeoResult = pd.concat([originalGPSTrack, GPS_ResInt], axis=1)\n#Drop duplicated columns. Latitude, Longitued, and DateTime will not be part of the final result.\nMagGeoResult.drop(columns=['Latitude', 'Longitude', 'DateTime'], inplace=True)\nMagGeoResult",
    "crumbs": [
      "Home",
      "Notebooks",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>MagGeo - Sequential Mode</span>"
    ]
  },
  {
    "objectID": "SequentialMode.html#export-the-final-results-to-a-csv-file",
    "href": "SequentialMode.html#export-the-final-results-to-a-csv-file",
    "title": "1  MagGeo - Sequential Mode",
    "section": "1.11 Export the final results to a CSV file",
    "text": "1.11 Export the final results to a CSV file\n\n%%time\n#Exporting the CSV file\noutputfile =\"GeoMagResult_\"+gpsfilename\nexport_csv = MagGeoResult.to_csv (os.path.join(results_dir,outputfile), index = None, header=True)",
    "crumbs": [
      "Home",
      "Notebooks",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>MagGeo - Sequential Mode</span>"
    ]
  },
  {
    "objectID": "SequentialMode.html#validate-the-results-optional",
    "href": "SequentialMode.html#validate-the-results-optional",
    "title": "1  MagGeo - Sequential Mode",
    "section": "1.12 Validate the results ( Optional)",
    "text": "1.12 Validate the results ( Optional)\nTo validate the results we plot the Fgpscolumn.\n\n## Creating a copy of the results and setting the Datetime Column as dataframe index.\nValidateDF = GPS_ResInt.copy()\nValidateDF.set_index(\"DateTime\", inplace=True)\n## Plotting the F column.\nhist = ValidateDF.hist(column='F')\nplt.title('F distribution')\nplt.xlabel('F in nT')\nplt.ylabel('# of measurements')",
    "crumbs": [
      "Home",
      "Notebooks",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>MagGeo - Sequential Mode</span>"
    ]
  },
  {
    "objectID": "SequentialMode.html#map-the-gps-track-using-the-annotated-magnetic-values-optional",
    "href": "SequentialMode.html#map-the-gps-track-using-the-annotated-magnetic-values-optional",
    "title": "1  MagGeo - Sequential Mode",
    "section": "1.13 Map the GPS Track using the annotated Magnetic Values (Optional)",
    "text": "1.13 Map the GPS Track using the annotated Magnetic Values (Optional)\nNow we are going to plot the annotated GPS track stored into the MagDataFinal dataframe to see the different magnetic components in a map to have a better prespective of the impact of the earth magnetic field.\n\nValidateDF.plot(kind=\"scatter\", x=\"Latitude\", y=\"Longitude\",\n    label=\"Magnetic Intensity in nT\",\n    c=\"F\", cmap=plt.get_cmap(\"gist_rainbow\"),\n    colorbar=True, alpha=0.4, figsize=(10,7),\n    sharex=False #This is only needed to get the x-axis label working due to a current bug in pandas plot.\n    \n)\n\nplt.ylabel(\"Longitude\", fontsize=12)\nplt.xlabel(\"Latitude\", fontsize=12)\nplt.legend(fontsize=12)\nplt.show()\n\n\nimport geopandas\nimport geoplot\nimport hvplot.pandas\ngdf = geopandas.GeoDataFrame(ValidateDF, geometry=geopandas.points_from_xy(ValidateDF.Longitude, ValidateDF.Latitude))\ngdf.head()\n\n\ngdf.hvplot(title=f'Annotated trajectory using MagGeo - F GeoMag Intensity',\n   geo=True,\n   c='F',\n   tiles='CartoLight',\n   frame_width=700,\n   frame_height=500)\n\n\ngdf.hvplot(title=f'Annotated trajectory using MagGeo - I Inclination',\n   geo=True,\n   tiles='CartoLight',\n   c='I',\n   cmap='Viridis',\n   frame_width=700,\n   frame_height=500)\n\n\nworld = geopandas.read_file(geopandas.datasets.get_path('naturalearth_lowres'))\n\nax = world.plot(color='white', edgecolor='gray', figsize = (18,8))\n\nminx, miny, maxx, maxy = gdf.total_bounds\nax.set_xlim(minx, maxx)\nax.set_ylim(miny, maxy)\n\ngdf.plot(ax=ax, column='F', legend=True, \n     legend_kwds={'label': \"Magnetic Intensity in nT\",\n      'orientation': \"horizontal\"})\nplt.ylabel(\"Longitude\", fontsize=12)\nplt.xlabel(\"Latitude\", fontsize=12)\n\nplt.show()\n\n\nfig, (ax1, ax2) = plt.subplots(ncols=2, figsize = (18,8))\n\nax1 = world.plot(ax=ax1, color='white', edgecolor='black')\nxlim = ([gdf.total_bounds[0],  gdf.total_bounds[2]])\nylim = ([gdf.total_bounds[1],  gdf.total_bounds[3]])\nax1.set_xlim(xlim)\nax1.set_ylim(ylim)\n\n\ngdf.plot(ax=ax1, column='F', legend=True,\n     legend_kwds={'label': \"Magnetic Intensity in nT\",\n      'orientation': \"horizontal\"})\nplt.ylabel(\"Longitude\", fontsize=9)\nplt.xlabel(\"Latitude\", fontsize=9)\nax1.set_title('Magnetic Intensity - F')\nax1.set_xlabel('Latitude')\nax1.set_ylabel('Longitude')\n\n\nax2 = world.plot( ax=ax2, color='white', edgecolor='black')\nxlim = ([gdf.total_bounds[0],  gdf.total_bounds[2]])\nylim = ([gdf.total_bounds[1],  gdf.total_bounds[3]])\nax2.set_xlim(xlim)\nax2.set_ylim(ylim)\n\n\n# We can now plot our ``GeoDataFrame``.\ngdf.plot(ax=ax2, column='I', legend=True, cmap='Spectral', \n     legend_kwds={'label': \" Inclination in Degrees\",\n      'orientation': \"horizontal\"})\nax2.set_title('Inclination - I')\nax2.set_xlabel('Latitude')\nax2.set_ylabel('Longitude')",
    "crumbs": [
      "Home",
      "Notebooks",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>MagGeo - Sequential Mode</span>"
    ]
  },
  {
    "objectID": "ParallelMode.html",
    "href": "ParallelMode.html",
    "title": "2  MagGeo - Parallel Mode",
    "section": "",
    "text": "2.1 Overview\nAuthors | Fernando Benitez-Paez, Urška Demšar, Jed Long, Ciaran Beggan\nContact | Fernando.Benitez@st-andrews.ac.uk, ud2@st-andrews.ac.uk, jed.long@uwo.ca, ciar@bgs.ac.uk\nKeywords | Bird migration, data fusion, Earth’s magnetic field, Swarm, GPS tracking\nThis Jupyter Notebook will guide you through the required steps to annotate your GPS tracking data with the earth’s magnetic field data from Swarm (European Space Agency). This version is called Parallel Mode to take advantage of parallelized computing to process big datasets.\nTo execute the code, you can go through each cell (pressing Crtl+Enter), you will also find inner comments ## to describe each particular step. If you are not familiar with Jupyter Notebook, you migth want to take some time to learn how to use it first, for example take a look at the notebook-basics.ipynb Notebook inside MagGeo.\nFor parallel processing, there are some considerations to make:",
    "crumbs": [
      "Home",
      "Notebooks",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>MagGeo - Parallel Mode</span>"
    ]
  },
  {
    "objectID": "ParallelMode.html#overview",
    "href": "ParallelMode.html#overview",
    "title": "2  MagGeo - Parallel Mode",
    "section": "",
    "text": "Linux and Windows environments have some differences. In windows we need to separate the functions and store them separately, then import them into a main function.\nDefining what part of the process is CPU bound and what part is I/O bound: Identify what parts of the program are I/O bound (writing or reading from the disk or network) and what part par CPU bound ( Processing capacity). To take advantage of our CPU capacity we need to identify the process where the CPU is actually doing the main Tasks.",
    "crumbs": [
      "Home",
      "Notebooks",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>MagGeo - Parallel Mode</span>"
    ]
  },
  {
    "objectID": "ParallelMode.html#data-requirements",
    "href": "ParallelMode.html#data-requirements",
    "title": "2  MagGeo - Parallel Mode",
    "section": "2.2 Data requirements",
    "text": "2.2 Data requirements\n\n🔎 Your trajectory must be in a csv format:\nThere are three columns that must be included in your GPS trajectory. Make sure your GPS trajectory includes Latitude , Longitude and timestamp. We suggest that the Timestamp column follow the day/month/year Hour:Minute (dd/mm/yyyy HH:MM:SS) format, Latitude and Longitude should be in decimal degrees (WGS84). Optionally an altitude column can be used providing altitude (the altitude must be in km). Other Columns will be ignored. Here it is an example of how your GPS track should look:\n\nFor this example we are reading the BirdGPSTrajectory.csv file. If you want to run the method using your own csv file, make sure you store your the file in the ./data folder. For more information about the dataset we used in this example go to the Main Notebook.",
    "crumbs": [
      "Home",
      "Notebooks",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>MagGeo - Parallel Mode</span>"
    ]
  },
  {
    "objectID": "ParallelMode.html#import-the-requeried-libraries",
    "href": "ParallelMode.html#import-the-requeried-libraries",
    "title": "2  MagGeo - Parallel Mode",
    "section": "2.3 Import the requeried libraries",
    "text": "2.3 Import the requeried libraries\n\nimport datetime as dt\nfrom datetime import timedelta\nimport sys, os\nimport pandas as pd\nimport numpy as np\nfrom tqdm import tqdm\nfrom pathlib import Path\nimport matplotlib.pyplot as plt\n\nfrom viresclient import set_token\nsys.path.append(\"..\")\nimport utilities\nfrom utilities.MagGeoFunctions import getGPSData\nfrom utilities.MagGeoFunctions import Get_Swarm_residuals",
    "crumbs": [
      "Home",
      "Notebooks",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>MagGeo - Parallel Mode</span>"
    ]
  },
  {
    "objectID": "ParallelMode.html#add-your-vires-web-client-token",
    "href": "ParallelMode.html#add-your-vires-web-client-token",
    "title": "2  MagGeo - Parallel Mode",
    "section": "2.4 Add your VirES web client Token",
    "text": "2.4 Add your VirES web client Token\nThe VirES client API, requires a token. Before start you need to get your own VirES token. You can visit https://vires.services/ to get yours, and then add it into the next cell.\n\nset_token(\"https://vires.services/ows\", set_default=True)",
    "crumbs": [
      "Home",
      "Notebooks",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>MagGeo - Parallel Mode</span>"
    ]
  },
  {
    "objectID": "ParallelMode.html#reading-the-gps-track",
    "href": "ParallelMode.html#reading-the-gps-track",
    "title": "2  MagGeo - Parallel Mode",
    "section": "2.5 Reading the GPS track",
    "text": "2.5 Reading the GPS track\nThe following steps will load the GPS track from a csv file, and set some requirements before download the data from Swarm. Importing the GPS track. You can note that there is a folder to store the CSV file. Using os.getcwd() you can validate where the file is located.\n\nbase_dir=os.path.dirname(os.getcwd())\ntemp_results_dir = os.path.join(base_dir, \"temp_data\")\nresults_dir = os.path.join(base_dir, \"results\")\ndata_dir = os.path.join(base_dir, \"data\")\n\n\n#Make sure the csv file of your trajectory is stored in the Data folder.\n#Enter the name of your GPS track csv file including the extension .csv  and press Enter (e.g. BirdGPSTrajectory.csv)\n# Make sure you have a column that integrates date and time, before include in MagGeo.\n#If your csv track file does not have any altitude attribute, MagGeo will use sea level as your altitude (i.e. 0 Km).\n# i.e height (Only in KM)\n\ngpsfilename= \"BirdGPSTrajectoryTest.csv\"\nLat=\"location-lat\"\nLong=\"location-long\"\nDateTime=\"timestamp\"\naltitude = \"height\"\n\n\n# Here MagGeo is reading your CSV file, taking the Lat, Long, Date&Time and Altitude attributes and compute, some additional attributes we need to the annotation process.\n# Setting the date and time attributes for the required format and computing the epoch column. Values like Maximum and Minimum Date and time are also calculated.\nGPSData = getGPSData(data_dir,gpsfilename,Lat,Long,DateTime,altitude)\nGPSData\n\nSetting the date and time attributes for the requerided format and computing the epoch column. Values like Maximum and Minimun Date and time are also calculated.",
    "crumbs": [
      "Home",
      "Notebooks",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>MagGeo - Parallel Mode</span>"
    ]
  },
  {
    "objectID": "ParallelMode.html#validate-the-right-amount-of-swarm-measures",
    "href": "ParallelMode.html#validate-the-right-amount-of-swarm-measures",
    "title": "2  MagGeo - Parallel Mode",
    "section": "2.6 Validate the right amount of Swarm measures",
    "text": "2.6 Validate the right amount of Swarm measures\nThe following loop is identifiying the time and validating if the time is less than 4:00 hours and more than 20:00 hours to bring one extra day of data. The result of this validation is written in a empty python list which will be later validated to get the unique dates avoing to download data for the same day and reducing the the downloand time process.\n\n%%time\ndatestimeslist = []\nfor index, row in GPSData.iterrows():\n    datetimerow  = row['gpsDateTime']\n    daterow = row['dates']\n    hourrow = row['times']\n    hourrow = hourrow.strftime('%H:%M:%S')\n    if hourrow &lt; '04:00:00':\n        date_bfr = daterow - (timedelta(days=1))\n        datestimeslist.append(daterow)\n        datestimeslist.append(date_bfr)\n    if hourrow &gt; '20:00:00':\n        Date_aft = daterow + (timedelta(days=1))\n        datestimeslist.append(daterow)\n        datestimeslist.append(Date_aft)  \n    else:\n        datestimeslist.append(daterow)\n\nGetting a list of unique dates, to being used to download the Swarm Data\n\n%%time\ndef uniquelistdates(list): \n    x = np.array(list) \n    uniquelist = np.unique(x)\n    return uniquelist\n\nuniquelist_dates = uniquelistdates(datestimeslist)\nuniquelist_dates",
    "crumbs": [
      "Home",
      "Notebooks",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>MagGeo - Parallel Mode</span>"
    ]
  },
  {
    "objectID": "ParallelMode.html#download-swarm-residuals-data",
    "href": "ParallelMode.html#download-swarm-residuals-data",
    "title": "2  MagGeo - Parallel Mode",
    "section": "2.7 Download Swarm residuals data",
    "text": "2.7 Download Swarm residuals data\nOnce the date and time columns have been defined, and the unique dates were identified the script can start the download process. Usually the data from Swarm is requested using only one satellite, however MagGeo will use the magnetic measures from the three satellite of the Swarm Mission.\n\n📘 Be aware: Due to the amount of dates the GPS track has (42 days) to request and compute the residuals, the time to process the sample data will take approximately 10 minutes.\n\nSet a connection to the VirES client and using the function Get_Swarm_residuals we will get the swarm residuals for the dates included in the previous list.\n\n%%time\n\nhours_t_day = 24\nhours_added = dt.timedelta(hours = hours_t_day)\n\nlistdfa = []\nlistdfb = []\nlistdfc = []\n\nfor d in tqdm(uniquelist_dates, desc=\"Getting Swarm Data\"):\n    #print(\"Getting Swarm data for date:\",d )\n    startdate = dt.datetime.combine(d, dt.datetime.min.time())\n    enddate = startdate + hours_added\n    SwarmResidualsA,SwarmResidualsB,SwarmResidualsC = Get_Swarm_residuals(startdate, enddate)\n    listdfa.append(SwarmResidualsA)\n    listdfb.append(SwarmResidualsB)\n    listdfc.append(SwarmResidualsC)\n\nConcat the previous results and temporally save the requested data locally: Integrate the previous list for all dates, into pandas dataframes. We will temporally saved the previous results, in case you need to re-run MagGeo, with the following csv files you will not need to run the download process.\n\n%%time\nTotalSwarmRes_A = pd.concat(listdfa, join='outer', axis=0)\nTotalSwarmRes_A.to_csv (os.path.join(temp_results_dir,'TotalSwarmRes_A.csv'), header=True)\nTotalSwarmRes_B = pd.concat(listdfb, join='outer', axis=0)\nTotalSwarmRes_B.to_csv (os.path.join(temp_results_dir,'TotalSwarmRes_B.csv'), header=True)\nTotalSwarmRes_C = pd.concat(listdfc, join='outer', axis=0)\nTotalSwarmRes_C.to_csv (os.path.join(temp_results_dir,'TotalSwarmRes_C.csv'), header=True)\nTotalSwarmRes_A #If you need to take a look of the Swarm Data, you can print TotalSwarmRes_B, or TotalSwarmRes_C",
    "crumbs": [
      "Home",
      "Notebooks",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>MagGeo - Parallel Mode</span>"
    ]
  },
  {
    "objectID": "ParallelMode.html#set-the-number-of-processes-and-split-the-dataframe-gpsdata-into-chunks",
    "href": "ParallelMode.html#set-the-number-of-processes-and-split-the-dataframe-gpsdata-into-chunks",
    "title": "2  MagGeo - Parallel Mode",
    "section": "2.8 Set the number of processes, and split the dataframe (GPSData) into chunks",
    "text": "2.8 Set the number of processes, and split the dataframe (GPSData) into chunks\nWe can set the number or processess we need to dedicate for the multiprocessing mode, of course that also depends on the number of cores the machine you are using to run MagGeo. You can use multiprocessing.cpu_count() to set the number of processes as the the number of cores your machine has. Beside that we will also to split the GPS track into chucks to dedicate each core for each chuck. For more information take a look at the Home Notebook.\n\nimport multiprocessing\nimport sklearn\nfrom multiprocessing import Pool\n\nNumCores = multiprocessing.cpu_count()\ndf_chunks = np.array_split(GPSData,NumCores)\ndf_chunks",
    "crumbs": [
      "Home",
      "Notebooks",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>MagGeo - Parallel Mode</span>"
    ]
  },
  {
    "objectID": "ParallelMode.html#spatio-temporal-filter-and-interpolation-process-st-idw",
    "href": "ParallelMode.html#spatio-temporal-filter-and-interpolation-process-st-idw",
    "title": "2  MagGeo - Parallel Mode",
    "section": "2.9 Spatio-Temporal filter and Interpolation process (ST-IDW)",
    "text": "2.9 Spatio-Temporal filter and Interpolation process (ST-IDW)\nOnce we have requested the swarm data, now we need to filter in space and time the available points to compute the magnetic values (NEC frame) for each GPS point based on its particular date and time. The function ST_IDW_Process imported in the row_handler, takes the GPS track and the downloaded data from swarm to filter in space and time based on the criteria defined in our method. With the swarm data filtered we interpolated (IDW) the NEC components for each GPS data point, based on the latitude, date, time and number of Swarm points filtered.\nThe function CHAOS_ground_values, inside the MagGeoFunctions file, is used to run the Calculation of magnetic components. This calculation requeries the magnetic components at the trajectory altitude (or at the ground level) using CHAOS (theta, phi, radial). This process include a rotation and transformation between a geocentric frame (CHAOS) and geodetic frame (GPS track). Once the corrected values are calculated, are included in the GPS track, and the non-necesary columns are removed. For more information about this process go to the Main Notebook.\n\n2.9.1 Run the (ST-IDW) process in parallel mode\nAlthough the next cell seems to run a small main function. What is happening is a call for several functions running at same time for several cores. Initially we set a pool of processes. Using the pool class we will distribute the assigned function among the data chucks we created. Every data chunk will be like a subset of the entire GPS track. So we need to iterate among data chunk. And inside every data chunk we need to identify the datetime, epoch, altitude, latitude and longitude of each row to run the interpolation & annotation process using the Swarm data we have filtered and stored in the previous steps.\nThe function in charge to distribute the required function (row_handler) among the data chunks is the map function from the pool class.\nrow_handler.py is an interows iteration to get the required parameter for the ST_IDW_Process function.\n\n📘 Auxiliary Functions:\n\n\nST_IDW_Process function: This is the main function in charge to read the Swarm Data already filtered, and then import DfTime_func, distance_to_GPS, Kradius , DistJ functions to compute the spatial-time cylinder and the annotation process. The return of this function is a row (dictionary) that will be appended into a python list where all the results from the different cores. The python list from every process is concatenated into a pandas dataframe in the main function having there the whole chain of the parallel process.\n\n\ndistance_to_GPS function: Is the function in charge to calculate the distance between each GPS Point and the Swarm Point.\n\n\nKradius function: Is the function in charge to compute the R (radius) value in the cylinder. The R value will be considered based on the latitude of each GPS Point.\n\n\nDistJ function: This function will calculate the d value as the hypotenuse created in the triangle created amount the locations of the GPS point, the location of the Swarm points and the radius value.\n\n\nDfTime_func function: This is a time function to selected the points in the range of a the DeltaTime - DT window. The Delta time window has been set as 4 hours for each satellite trajectory.\n\n\nCHAOS_ground_values function: This is the calculation of geomagnetic components function to get the CHAOS magnetic values and process the Nres,Eres,Cres values and transform them into the N,E,C values at the GPS altitude.\n\n\n\n\n%%time\nfrom functools import partial\nfrom utilities.row_handler import row_handler\n\nif __name__ == '__main__':\n    with multiprocessing.Pool(NumCores) as pool:\n        GeoMagParallelResult = pd.concat(pool.map(partial(row_handler),df_chunks), ignore_index=True)\n\nWith the Parallel mode the Annotation process takes about 12 seconds to complete ( We had tested the parallel process in a windows server machine with 12 cores, see the image bellow). With the same GPS track in the sequetial mode the process is complete in about 2 minutes. In the image bellow you can see how the machine create several python processes and all cores (full CPU capacity) is taken.\n\n🔈 Multiprocessing:\nis even more powerfull when you have to process a big amount of data (e.g. 2 millons of points). Although here is making a notable improvement if you have to process a big dataset the parallelization makes even more sense.\nBe aware that there is no output cell in here, you can follow the parallelization progress in the Anaconda Prompt.",
    "crumbs": [
      "Home",
      "Notebooks",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>MagGeo - Parallel Mode</span>"
    ]
  },
  {
    "objectID": "ParallelMode.html#the-final-result",
    "href": "ParallelMode.html#the-final-result",
    "title": "2  MagGeo - Parallel Mode",
    "section": "2.10 The final result",
    "text": "2.10 The final result\nWith the NEC components for each GPS Track point, it is possible to compute the aditional magnetic components. For more information about the magnetic components and their relevance go to the main paper or notebook.\n\n&lt;strong&gt;📘 The annotated dataframe will include the following attributes:&lt;/strong&gt; If you need more information about how the geomagnetic component are described go to the main MagGeo Notebook (Add Link).\n&lt;ul&gt;\n  &lt;li&gt;&lt;strong&gt;Latitude&lt;/strong&gt; from the GPS Track.&lt;/li&gt;\n  &lt;li&gt;&lt;strong&gt;Longitude&lt;/strong&gt; from the GPS Track.&lt;/li&gt;\n  &lt;li&gt;&lt;strong&gt;Timestamp&lt;/strong&gt; from the GPS Track.&lt;/li&gt;\n  &lt;li&gt;&lt;strong&gt;Magnetic Field Intensity&lt;/strong&gt;  mapped as Fgps in nanoTeslas (nT).&lt;/li&gt;\n  &lt;li&gt;&lt;strong&gt;N (Northwards) component&lt;/strong&gt; mapped as N in nanoTeslas (nT).&lt;/li&gt;\n  &lt;li&gt;&lt;strong&gt;E (Eastwards) component&lt;/strong&gt; mapped as E. in nanoteslas (nT).&lt;/li&gt;\n  &lt;li&gt;&lt;strong&gt;C (Downwards or Center)&lt;/strong&gt; component mapped as C in nanoTeslas (nT).&lt;/li&gt;\n  &lt;li&gt;&lt;strong&gt;Horizontal component&lt;/strong&gt; mapped as H in nanoTeslas (nT).&lt;/li&gt;\n  &lt;li&gt;&lt;strong&gt;Magnetic Inclination &lt;/strong&gt; mapped as I in degrees.&lt;/li&gt; \n  &lt;li&gt;&lt;strong&gt;Magnetic Declination or dip angle&lt;/strong&gt; mapped as D in degrees&lt;/li&gt;\n  &lt;li&gt;&lt;strong&gt;Kp Index&lt;/strong&gt; mapped as kp&lt;/li&gt;\n  &lt;li&gt;&lt;strong&gt;Total Points&lt;/strong&gt; as the amount of Swarm messuares included in the ST-IDW process from the trajectories requested in the three satellites.&lt;/li&gt;\n  &lt;li&gt;&lt;strong&gt;Minimum Distance&lt;/strong&gt; mapped as MinDist, representing the minimum distance amount the set of identified point inside the Space Time cylinder and each GPS point location.&lt;/li&gt;\n  &lt;li&gt;&lt;strong&gt;Average Distance&lt;/strong&gt; mapped as AvDist, representing the average distance amount the set of distances between the identified Swarm Point in the Space Time cylinder and the GPS Points location.&lt;/li&gt;\n&lt;/ul&gt;\n\n\n#14. Having Intepolated and weigth magnetic values, we can compute the other magnectic components. \nGeoMagParallelResult['H'] = np.sqrt((GeoMagParallelResult['N']**2)+(GeoMagParallelResult['E']**2))\n#check the arcgtan in python., From arctan2 is saver.\nDgpsRad = np.arctan2(GeoMagParallelResult['E'],GeoMagParallelResult['N'])\nGeoMagParallelResult['D'] = np.degrees(DgpsRad)\nIgpsRad = np.arctan2(GeoMagParallelResult['C'],GeoMagParallelResult['H'])\nGeoMagParallelResult['I'] = np.degrees(IgpsRad)\nGeoMagParallelResult['F'] = np.sqrt((GeoMagParallelResult['N']**2)+(GeoMagParallelResult['E']**2)+(GeoMagParallelResult['C']**2))\nGeoMagParallelResult\n\nThe previous dataframe (GPS_ResInt), MagGeo has computed the geomagnetic components for each locations and time of your CSV trajectory. Now we will finish up combining the original atributes from your CSV with the annotated results from MagGeo.\n\n%%time\n\noriginalGPSTrack=pd.read_csv(os.path.join(data_dir,gpsfilename))\nMagGeoResult = pd.concat([originalGPSTrack, GeoMagParallelResult], axis=1)\n#Drop duplicated columns. Latitude, Longitued, and DateTime will not be part of the final result.\nMagGeoResult.drop(columns=['Latitude', 'Longitude', 'DateTime'], inplace=True)\nMagGeoResult",
    "crumbs": [
      "Home",
      "Notebooks",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>MagGeo - Parallel Mode</span>"
    ]
  },
  {
    "objectID": "ParallelMode.html#export-the-final-results-to-a-csv-file",
    "href": "ParallelMode.html#export-the-final-results-to-a-csv-file",
    "title": "2  MagGeo - Parallel Mode",
    "section": "2.11 Export the final results to a CSV file",
    "text": "2.11 Export the final results to a CSV file\n\n%%time\n#Exporting the CSV file\noutputfile =\"GeoMagResult_\"+gpsfilename\nexport_csv = MagGeoResult.to_csv (os.path.join(results_dir,outputfile), index = None, header=True)",
    "crumbs": [
      "Home",
      "Notebooks",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>MagGeo - Parallel Mode</span>"
    ]
  },
  {
    "objectID": "ParallelMode.html#validate-the-results-optional",
    "href": "ParallelMode.html#validate-the-results-optional",
    "title": "2  MagGeo - Parallel Mode",
    "section": "2.12 Validate the results (optional)",
    "text": "2.12 Validate the results (optional)\nTo validate the results we plot the Fcolumn.\n\n## Creating a copy of the results and setting the Datetime Column as dataframe index.\nValidateDF = GeoMagParallelResult.copy()\nValidateDF.set_index(\"DateTime\", inplace=True)\n## Plotting the F column.\nhist = ValidateDF.hist(column='F')\nplt.title('F distribution')\nplt.xlabel('F in nT')\nplt.ylabel('# of measurements')",
    "crumbs": [
      "Home",
      "Notebooks",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>MagGeo - Parallel Mode</span>"
    ]
  },
  {
    "objectID": "ParallelMode.html#mapping-the-gps-track-using-the-annotated-magnetic-values-optional",
    "href": "ParallelMode.html#mapping-the-gps-track-using-the-annotated-magnetic-values-optional",
    "title": "2  MagGeo - Parallel Mode",
    "section": "2.13 Mapping the GPS Track using the annotated Magnetic Values (optional)",
    "text": "2.13 Mapping the GPS Track using the annotated Magnetic Values (optional)\nNow we are going to plot the annotated GPS track stored into the MagDataFinal dataframe to see how the different magnetic components in a map to have a better prespective of the impact of the earth magnetic field.\n\nValidateDF.plot(kind=\"scatter\", x=\"Latitude\", y=\"Longitude\",\n    label=\"Magnetic Intensity in nT\",\n    c=\"F\", cmap=plt.get_cmap(\"gist_rainbow\"),\n    colorbar=True, alpha=0.4, figsize=(10,7),\n    sharex=False #This is only needed to get the x-axis label working due to a current bug in pandas plot.\n)\n\nplt.ylabel(\"Longitude\", fontsize=12)\nplt.xlabel(\"Latitude\", fontsize=10)\nplt.legend(fontsize=12)\nplt.show()\n\n\nimport geopandas\nimport geoplot\nimport hvplot.pandas \ngdf = geopandas.GeoDataFrame(ValidateDF, geometry=geopandas.points_from_xy(ValidateDF.Longitude, ValidateDF.Latitude))\ngdf.head()\n\n\ngdf.hvplot(title=f'Annotated trajectory using MagGeo - F GeoMag Intensity',\n           geo=True,\n           c='F',\n           tiles='CartoLight',\n           frame_width=700,\n           frame_height=500)\n\n\ngdf.hvplot(title=f'Annotated trajectory using MagGeo - I Inclination',\n           geo=True,\n           tiles='CartoLight',\n           c='I',\n           cmap='Viridis',\n           frame_width=700,\n           frame_height=500)\n\n\nworld = geopandas.read_file(geopandas.datasets.get_path('naturalearth_lowres'))\nax = world.plot(color='white', edgecolor='black', figsize = (12,6))\n\nminx, miny, maxx, maxy = gdf.total_bounds\nax.set_xlim(minx, maxx)\nax.set_ylim(miny, maxy)\n\n# We can now plot our ``GeoDataFrame``.\ngdf.plot(ax=ax, column='F', legend=True, \n         legend_kwds={'label': \"Magnetic Intensity in nT\",\n                      'orientation': \"horizontal\"})\nplt.ylabel(\"Longitude\", fontsize=9)\nplt.xlabel(\"Latitude\", fontsize=9)\n\nplt.show()\n\n\nfig, (ax1, ax2) = plt.subplots(ncols=2, figsize = (15,6))\n\nax1 = world.plot(ax=ax1, color='white', edgecolor='black')\nxlim = ([gdf.total_bounds[0],  gdf.total_bounds[2]])\nylim = ([gdf.total_bounds[1],  gdf.total_bounds[3]])\nax1.set_xlim(xlim)\nax1.set_ylim(ylim)\n\n\ngdf.plot(ax=ax1, column='F', legend=True,\n         legend_kwds={'label': \"Magnetic Intensity in nT\",\n                      'orientation': \"horizontal\"})\nplt.ylabel(\"Longitude\", fontsize=9)\nplt.xlabel(\"Latitude\", fontsize=9)\nax1.set_title('Magnetic Intensity - F')\nax1.set_xlabel('Latitude')\nax1.set_ylabel('Longitude')\n\n\nax2 = world.plot( ax=ax2, color='white', edgecolor='black')\nxlim = ([gdf.total_bounds[0],  gdf.total_bounds[2]])\nylim = ([gdf.total_bounds[1],  gdf.total_bounds[3]])\nax2.set_xlim(xlim)\nax2.set_ylim(ylim)\n\n\n# We can now plot our ``GeoDataFrame``.\ngdf.plot(ax=ax2, column='D', legend=True, cmap='Spectral', \n         legend_kwds={'label': \" Declination in Degrees\",\n                      'orientation': \"horizontal\"})\nax2.set_title('Declination - D')\nax2.set_xlabel('Latitude')\nax2.set_ylabel('Longitude')",
    "crumbs": [
      "Home",
      "Notebooks",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>MagGeo - Parallel Mode</span>"
    ]
  },
  {
    "objectID": "troubleshooting.html",
    "href": "troubleshooting.html",
    "title": "Troubleshooting Guide",
    "section": "",
    "text": "Before Seeking Help\nYou should complete this checklist:\n\nMiniconda is installed and conda --version works\nEnvironment was created without errors\nEnvironment shows (maggeo) when activated\nVerification script runs successfully\nJupyter Lab starts without errors\n\n\n\nStandardized Error Reporting\nWhen reporting problems, always include:\n# Run these commands and include output\nconda info\nconda list geopandas\npython --version\njupyter --version\n\n\n\nIssue 1: “conda: command not found”\nThis is the most common issue for beginners.\nWindows Solution:\n# Option 1: Use the correct command prompt\n# Search for \"Anaconda Prompt\" in Start Menu if available\n# Or reinstall Miniconda ensuring PATH is added\n\n# Option 2: Manually add to PATH\nset PATH=%PATH%;C:\\Users\\%USERNAME%\\miniconda3\\Scripts\nset PATH=%PATH%;C:\\Users\\%USERNAME%\\miniconda3\nmacOS Solution:\n# Add to PATH temporarily\nexport PATH=\"$HOME/miniconda3/bin:$PATH\"\n\n# Add to PATH permanently\necho 'export PATH=\"$HOME/miniconda3/bin:$PATH\"' &gt;&gt; ~/.bash_profile\nsource ~/.bash_profile\n\n# For zsh users (macOS Catalina and later)\necho 'export PATH=\"$HOME/miniconda3/bin:$PATH\"' &gt;&gt; ~/.zshrc\nsource ~/.zshrc\n\n\nIssue 2: Environment Creation Fails\nCommon causes and solutions:\n# Solution 1: Clean conda cache\nconda clean --all\n\n# Solution 2: Update conda first\nconda update conda\n\n# Solution 3: Try creating environment with explicit solver\nconda env create -f environment.yml --solver=classic\n\n# Solution 4: Check internet connection and try again\n# Large downloads may timeout on slow connections\n\n\nIssue 3: Different Python Versions\nAll students must have Python 3.10 for consistency.\n# Check your Python version\npython --version\n\n# If incorrect, remove environment and recreate\nconda env remove --name maggeo\nconda env create -f environment.yml\n\n\nIssue 4: Package Conflicts During Installation\nThis indicates environment file issues:\n# Solution: Use mamba for faster, more reliable solving\nconda install mamba -n base -c conda-forge\nmamba env create -f environment.yml\n\n\nIssue 5: Jupyter Lab Won’t Start\nConsistency check:\n# Ensure environment is activated\nconda activate maggeo\n\n# Verify Jupyter installation\njupyter --version\n\n# If missing, reinstall\nconda install jupyter jupyterlab -c conda-forge\n\n# Start Jupyter Lab\njupyter lab\n\n\nIssue 6: Import Errors Despite Successful Installation\nEnvironment activation problem:\n# Always activate environment first\nconda activate maggeo\n\n# Check which Python you're using\nwhich python     # macOS/Linux\nwhere python     # Windows\n\n# Should show path to conda environment, not system Python\n\n\nEmergency Reinstallation\nIf all else fails, sometimes it is better and quicker run a complete clean installation:\n# Remove environment\nconda env remove --name maggeo\n\n# Clean all caches\nconda clean --all\n\n# Recreate environment\nconda env create -f environment.yml\n\n\n\nAdditional Resources\nUse the following instructions as a guide for extra resources and better familiarity with working with Python. In case you want to manage your python environment, and get extra learning resources.\n\nEnvironment Management - Useful Commands\n# List all environments\nconda env list\n\n# Activate environment\nconda activate maggeo\n\n# Deactivate environment\nconda deactivate\n\n# Update all packages in environment\nconda update --all\n\n# Install additional package\nconda install package-name\n\n# Remove environment\nconda env remove --name maggeo\n\n\nUpdating the Environment\n# Update environment from file\nconda env update -f environment.yml --prune\n\n\nExporting Your Environment\n# Export current environment\nconda env export &gt; my-environment.yml",
    "crumbs": [
      "Home",
      "Troubleshooting Guide"
    ]
  }
]